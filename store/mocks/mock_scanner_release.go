// Code generated by MockGen. DO NOT EDIT.
// Source: store/scanner_release.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	store "zktoro/store"
	gomock "github.com/golang/mock/gomock"
)

// MockScannerReleaseStore is a mock of ScannerReleaseStore interface.
type MockScannerReleaseStore struct {
	ctrl     *gomock.Controller
	recorder *MockScannerReleaseStoreMockRecorder
}

// MockScannerReleaseStoreMockRecorder is the mock recorder for MockScannerReleaseStore.
type MockScannerReleaseStoreMockRecorder struct {
	mock *MockScannerReleaseStore
}

// NewMockScannerReleaseStore creates a new mock instance.
func NewMockScannerReleaseStore(ctrl *gomock.Controller) *MockScannerReleaseStore {
	mock := &MockScannerReleaseStore{ctrl: ctrl}
	mock.recorder = &MockScannerReleaseStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScannerReleaseStore) EXPECT() *MockScannerReleaseStoreMockRecorder {
	return m.recorder
}

// GetRelease mocks base method.
func (m *MockScannerReleaseStore) GetRelease(ctx context.Context) (*store.ScannerRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", ctx)
	ret0, _ := ret[0].(*store.ScannerRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockScannerReleaseStoreMockRecorder) GetRelease(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockScannerReleaseStore)(nil).GetRelease), ctx)
}
