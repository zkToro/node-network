// Code generated by MockGen. DO NOT EDIT.
// Source: domain/ethereum.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClientSubscription is a mock of ClientSubscription interface.
type MockClientSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockClientSubscriptionMockRecorder
}

// MockClientSubscriptionMockRecorder is the mock recorder for MockClientSubscription.
type MockClientSubscriptionMockRecorder struct {
	mock *MockClientSubscription
}

// NewMockClientSubscription creates a new mock instance.
func NewMockClientSubscription(ctrl *gomock.Controller) *MockClientSubscription {
	mock := &MockClientSubscription{ctrl: ctrl}
	mock.recorder = &MockClientSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientSubscription) EXPECT() *MockClientSubscriptionMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockClientSubscription) Err() <-chan error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockClientSubscriptionMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockClientSubscription)(nil).Err))
}

// Unsubscribe mocks base method.
func (m *MockClientSubscription) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockClientSubscriptionMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockClientSubscription)(nil).Unsubscribe))
}
