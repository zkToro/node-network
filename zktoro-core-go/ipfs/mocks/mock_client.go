// Code generated by MockGen. DO NOT EDIT.
// Source: ipfs/client.go

// Package mock_ipfs is a generated GoMock package.
package mock_ipfs

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockClient) AddFile(payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockClientMockRecorder) AddFile(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockClient)(nil).AddFile), payload)
}

// CalculateFileHash mocks base method.
func (m *MockClient) CalculateFileHash(payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateFileHash", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateFileHash indicates an expected call of CalculateFileHash.
func (mr *MockClientMockRecorder) CalculateFileHash(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateFileHash", reflect.TypeOf((*MockClient)(nil).CalculateFileHash), payload)
}

// GetBytes mocks base method.
func (m *MockClient) GetBytes(ctx context.Context, reference string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBytes", ctx, reference)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBytes indicates an expected call of GetBytes.
func (mr *MockClientMockRecorder) GetBytes(ctx, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBytes", reflect.TypeOf((*MockClient)(nil).GetBytes), ctx, reference)
}

// UnmarshalJson mocks base method.
func (m *MockClient) UnmarshalJson(ctx context.Context, reference string, target interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalJson", ctx, reference, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalJson indicates an expected call of UnmarshalJson.
func (mr *MockClientMockRecorder) UnmarshalJson(ctx, reference, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalJson", reflect.TypeOf((*MockClient)(nil).UnmarshalJson), ctx, reference, target)
}
