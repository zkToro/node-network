// Code generated by MockGen. DO NOT EDIT.
// Source: utils/ethutils/iterator.go

// Package mock_ethutils is a generated GoMock package.
package mock_ethutils

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEventIterator is a mock of EventIterator interface.
type MockEventIterator[S any] struct {
	ctrl     *gomock.Controller
	recorder *MockEventIteratorMockRecorder[S]
}

// MockEventIteratorMockRecorder is the mock recorder for MockEventIterator.
type MockEventIteratorMockRecorder[S any] struct {
	mock *MockEventIterator[S]
}

// NewMockEventIterator creates a new mock instance.
func NewMockEventIterator[S any](ctrl *gomock.Controller) *MockEventIterator[S] {
	mock := &MockEventIterator[S]{ctrl: ctrl}
	mock.recorder = &MockEventIteratorMockRecorder[S]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventIterator[S]) EXPECT() *MockEventIteratorMockRecorder[S] {
	return m.recorder
}

// Close mocks base method.
func (m *MockEventIterator[S]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEventIteratorMockRecorder[S]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEventIterator[S])(nil).Close))
}

// Error mocks base method.
func (m *MockEventIterator[S]) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockEventIteratorMockRecorder[S]) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockEventIterator[S])(nil).Error))
}

// Next mocks base method.
func (m *MockEventIterator[S]) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockEventIteratorMockRecorder[S]) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockEventIterator[S])(nil).Next))
}

// Value mocks base method.
func (m *MockEventIterator[S]) Value() (*S, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*S)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockEventIteratorMockRecorder[S]) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockEventIterator[S])(nil).Value))
}

// MockabigenIterator is a mock of abigenIterator interface.
type MockabigenIterator struct {
	ctrl     *gomock.Controller
	recorder *MockabigenIteratorMockRecorder
}

// MockabigenIteratorMockRecorder is the mock recorder for MockabigenIterator.
type MockabigenIteratorMockRecorder struct {
	mock *MockabigenIterator
}

// NewMockabigenIterator creates a new mock instance.
func NewMockabigenIterator(ctrl *gomock.Controller) *MockabigenIterator {
	mock := &MockabigenIterator{ctrl: ctrl}
	mock.recorder = &MockabigenIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockabigenIterator) EXPECT() *MockabigenIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockabigenIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockabigenIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockabigenIterator)(nil).Close))
}

// Error mocks base method.
func (m *MockabigenIterator) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockabigenIteratorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockabigenIterator)(nil).Error))
}

// Next mocks base method.
func (m *MockabigenIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockabigenIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockabigenIterator)(nil).Next))
}
