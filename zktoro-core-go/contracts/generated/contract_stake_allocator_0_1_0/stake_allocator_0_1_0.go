// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_stake_allocator_0_1_0

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakeAllocatorMetaData contains all meta data concerning the StakeAllocator contract.
var StakeAllocatorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__subjectGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsDistributor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"}],\"name\":\"AllocatedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAllocated\",\"type\":\"uint256\"}],\"name\":\"UnallocatedStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateDelegatorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateOwnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedDelegatorsStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedManagedStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedOwnStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"allocatedStakePerManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeSharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"depositAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"didTransferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatedSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatorSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getSubjectTypeAgency\",\"outputs\":[{\"internalType\":\"enumSubjectTypeValidator.SubjectStakeAgency\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"contractIRewardsDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unallocateDelegatorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unallocateOwnStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"unallocatedStakeFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeSharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101006040523060a0523480156200001657600080fd5b5060405162003a5338038062003a53833981016040819052620000399162000259565b6001600160a01b038316608052600054610100900460ff1615808015620000675750600054600160ff909116105b8062000097575062000084306200022d60201b62001a8b1760201c565b15801562000097575060005460ff166001145b620001005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000124576000805461ff0019166101001790555b6001600160a01b038316620001705760405163eac0d38960e01b815260206004820152601060248201526f5f5f7375626a6563744761746577617960801b6044820152606401620000f7565b6001600160a01b038216620001c95760405163eac0d38960e01b815260206004820152601360248201527f5f726577617264734469737472696275746f72000000000000000000000000006044820152606401620000f7565b6001600160a01b0380841660c052821660e052801562000223576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050620002a3565b6001600160a01b03163b151590565b80516001600160a01b03811681146200025457600080fd5b919050565b6000806000606084860312156200026f57600080fd5b6200027a846200023c565b92506200028a602085016200023c565b91506200029a604085016200023c565b90509250925092565b60805160a05160c05160e0516136c76200038c6000396000818161022c015281816112e00152818161141b015281816117b00152818161190601528181611a2701528181611ed101526120430152600081816107700152818161088701528181610b2e01528181610c9701528181610dc501528181610fca01528181611526015281816115d6015281816122e4015281816123b501528181612459015281816125350152818161260201526126a601526000818161064f0152818161068f0152818161096b015281816109ab0152610a3e01526000818161033701526127ec01526136c76000f3fe60806040526004361061019c5760003560e01c8063993a364f116100ec578063c4d66de81161008a578063d39cbd1211610064578063d39cbd1214610531578063d858a7e514610551578063dfb4308e14610566578063e2c11b8d1461058657600080fd5b8063c4d66de8146104d1578063c9580804146104f1578063d0d87ac81461051157600080fd5b8063ac9650d8116100c6578063ac9650d814610444578063b18d6d5314610471578063c133a56214610491578063c1bf97c8146104b157600080fd5b8063993a364f146103e45780639e4db10014610404578063a14d787c1461042457600080fd5b80634f1ef28611610159578063572b6c0511610133578063572b6c051461031a578063574ef613146103775780636f096be814610397578063762fa7b7146103b757600080fd5b80634f1ef286146102a657806352d1902d146102b957806354fd4d50146102dc57600080fd5b80631daa0445146101a15780633121db1c146101d85780633659cfe6146101fa5780633f2a55401461021a578063499572af146102665780634edd0f2414610286575b600080fd5b3480156101ad57600080fd5b506101c16101bc366004612dd3565b6105a6565b60405160ff90911681526020015b60405180910390f35b3480156101e457600080fd5b506101f86101f3366004612e03565b6105c4565b005b34801561020657600080fd5b506101f8610215366004612e88565b610644565b34801561022657600080fd5b5061024e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cf565b34801561027257600080fd5b506101f8610281366004612ea5565b610724565b34801561029257600080fd5b506101f86102a1366004612ea5565b610858565b6101f86102b4366004612eee565b610960565b3480156102c557600080fd5b506102ce610a31565b6040519081526020016101cf565b3480156102e857600080fd5b5061030d604051806040016040528060058152602001640302e312e360dc1b81525081565b6040516101cf919061300a565b34801561032657600080fd5b50610367610335366004612e88565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101cf565b34801561038357600080fd5b506102ce61039236600461301d565b610ae4565b3480156103a357600080fd5b506102ce6103b236600461301d565b610bd5565b3480156103c357600080fd5b506103d76103d2366004612dd3565b610bf7565b6040516101cf919061307f565b3480156103f057600080fd5b506102ce6103ff36600461301d565b610c4d565b34801561041057600080fd5b506102ce61041f36600461301d565b610d23565b34801561043057600080fd5b506101f861043f366004612ea5565b610d96565b34801561045057600080fd5b5061046461045f36600461308d565b610ea6565b6040516101cf9190613102565b34801561047d57600080fd5b506101f861048c366004612ea5565b610f9b565b34801561049d57600080fd5b506101c16104ac366004612dd3565b6110ad565b3480156104bd57600080fd5b506102ce6104cc36600461301d565b6110c3565b3480156104dd57600080fd5b506101f86104ec366004612e88565b6110d2565b3480156104fd57600080fd5b506101f861050c366004612e88565b61119e565b34801561051d57600080fd5b506101f861052c366004613164565b61125c565b34801561053d57600080fd5b506102ce61054c36600461301d565b6114e1565b34801561055d57600080fd5b506101f8611662565b34801561057257600080fd5b506101f8610581366004613164565b6116ed565b34801561059257600080fd5b506101f86105a13660046131be565b6119af565b600060ff8216600314156105bc57506002919050565b5060ff919050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a6105f6816105f1611a9a565b611aa9565b6106335780610603611a9a565b6040516301d4003760e61b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b61063e848484611b2e565b50505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561068d5760405162461bcd60e51b815260040161062a90613217565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106d660008051602061362b833981519152546001600160a01b031690565b6001600160a01b0316146106fc5760405162461bcd60e51b815260040161062a90613263565b61070581611c44565b6040805160008082526020820190925261072191839190611c7e565b50565b8260028061073183610bf7565b600481111561074257610742613047565b1461076e578161075183610bf7565b826040516365f3939760e01b815260040161062a939291906132af565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c486866107a7611a9a565b6040518463ffffffff1660e01b81526004016107c5939291906132db565b60206040518083038186803b1580156107dd57600080fd5b505afa1580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081591906132ff565b61083e5760405163d43dcbe160e01b815260ff861660048201526024810185905260440161062a565b610851858561084b611a9a565b86611dfd565b5050505050565b8260028061086583610bf7565b600481111561087657610876613047565b14610885578161075183610bf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c486866108be611a9a565b6040518463ffffffff1660e01b81526004016108dc939291906132db565b60206040518083038186803b1580156108f457600080fd5b505afa158015610908573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092c91906132ff565b6109555760405163d43dcbe160e01b815260ff861660048201526024810185905260440161062a565b610851858585611fd5565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156109a95760405162461bcd60e51b815260040161062a90613217565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109f260008051602061362b833981519152546001600160a01b031690565b6001600160a01b031614610a185760405162461bcd60e51b815260040161062a90613263565b610a2182611c44565b610a2d82826001611c7e565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ad15760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161062a565b5060008051602061362b83398151915290565b60006002610af184610bf7565b6004811115610b0257610b02613047565b14610b0f57506000610bcf565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b158015610b7857600080fd5b505afa158015610b8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb09190613321565b610bc2610bbc856110ad565b846110c3565b610bcc9190613350565b90505b92915050565b6000610bcc610be48484612153565b600090815261012f602052604090205490565b600060ff821660011415610c0d57506001919050565b60ff821660021415610c2157506002919050565b60ff821660031415610c3557506003919050565b60ff8216610c4557506004919050565b506000919050565b60006002610c5a84610bf7565b6004811115610c6b57610c6b613047565b14610c7857506000610bcf565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b158015610ce157600080fd5b505afa158015610cf5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d199190613321565b610bc284846110c3565b60006002610d3084610bf7565b6004811115610d4157610d41613047565b1415610d8d57610d6f610d5c610d56856110ad565b84612153565b600090815261012d602052604090205490565b610d7c610d5c8585612153565b610d869190613372565b9050610bcf565b50600092915050565b82600280610da383610bf7565b6004811115610db457610db4613047565b14610dc3578161075183610bf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c48686610dfc611a9a565b6040518463ffffffff1660e01b8152600401610e1a939291906132db565b60206040518083038186803b158015610e3257600080fd5b505afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a91906132ff565b610e935760405163d43dcbe160e01b815260ff861660048201526024810185905260440161062a565b610851610e9f866110ad565b8585611fd5565b60608167ffffffffffffffff811115610ec157610ec1612ed8565b604051908082528060200260200182016040528015610ef457816020015b6060815260200190600190039081610edf5790505b50905060005b82811015610f9457610f6430858584818110610f1857610f1861338a565b9050602002810190610f2a91906133a0565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061219f92505050565b828281518110610f7657610f7661338a565b60200260200101819052508080610f8c906133ee565b915050610efa565b5092915050565b82600280610fa883610bf7565b6004811115610fb957610fb9613047565b14610fc8578161075183610bf7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ebe6f2c48686611001611a9a565b6040518463ffffffff1660e01b815260040161101f939291906132db565b60206040518083038186803b15801561103757600080fd5b505afa15801561104b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106f91906132ff565b6110985760405163d43dcbe160e01b815260ff861660048201526024810185905260440161062a565b6108516110a4866110ad565b8561084b611a9a565b600060ff8216600214156105bc57506003919050565b6000610bcc610d5c8484612153565b600054610100900460ff16158080156110f25750600054600160ff909116105b8061110c5750303b15801561110c575060005460ff166001145b6111285760405162461bcd60e51b815260040161062a90613409565b6000805460ff19166001179055801561114b576000805461ff0019166101001790555b611154826121c4565b8015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60006111ac816105f1611a9a565b6111b95780610603611a9a565b6111d36001600160a01b038316637965db0b60e01b61224e565b611211576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b604482015260640161062a565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b7fc1f968a51cafd0d994ea5efed1570f584045398ccad7dc4ce4e34ea86ff5c249611289816105f1611a9a565b6112965780610603611a9a565b600087815261012f6020526040812054906112b18286613457565b905060008113156113f7576112c961012d8a8361226a565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe79061131d908b908b9086908a908d90600401613496565b600060405180830381600087803b15801561133757600080fd5b505af115801561134b573d6000803e3d6000fd5b50505060008a815261012d602052604081205489925060ff8b169160008051602061360b83398151915291859060408051931515845260208401929092529082015260600160405180910390a3600089815261012f60205260409020546113b8908a9061012f919061226a565b6040805160008082526020820185905291810191909152879060ff8a169060008051602061364b833981519152906060015b60405180910390a36114d6565b61140461012f8a8761226a565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe790611459908b908b906000908a908d90600401613496565b600060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b50505060008a815261012f602052604081205489925060ff8b169160008051602061364b8339815191529189905b60408051931515845260208401929092529082015260600160405180910390a35b505050505050505050565b600060026114ee84610bf7565b60048111156114ff576114ff613047565b1415806115aa575060405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b15801561157057600080fd5b505afa158015611584573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a89190613321565b155b156115b757506000610bcf565b60405163b3b68d8b60e01b815260ff84166004820152602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b15801561162057600080fd5b505afa158015611634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116589190613321565b610bc28484610d23565b6065546001600160a01b03166116b05760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b604482015260640161062a565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b7fc1f968a51cafd0d994ea5efed1570f584045398ccad7dc4ce4e34ea86ff5c24961171a816105f1611a9a565b6117275780610603611a9a565b600061173287610bf7565b9050600281600481111561174857611748613047565b141580156117685750600381600481111561176557611765613047565b14155b1561177357506119a6565b600061178288888489896122ad565b50905060008113156118e2576117a68961179c83886134c7565b61012d91906127af565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016638063266d89896117e1858a6134c7565b888b6040518663ffffffff1660e01b8152600401611803959493929190613496565b600060405180830381600087803b15801561181d57600080fd5b505af1158015611831573d6000803e3d6000fd5b50505050868860ff1660008051602061360b8339815191526001848961185791906134c7565b60008e815261012d602052604090205460408051931515845260208401929092529082015260600160405180910390a361189461012f8a836127af565b8660ff891660008051602061364b8339815191526001846118c561012f8f6000908152602091909152604090205490565b6040805193151584526020840192909252908201526060016113ea565b6118ef61012d8a876127af565b604051638063266d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638063266d90611943908b908b908a908a908d90600401613496565b600060405180830381600087803b15801561195d57600080fd5b505af1158015611971573d6000803e3d6000fd5b50505060008a815261012d602052604090205488915060ff8a169060008051602061360b8339815191529060019089906114b5565b50505050505050565b7fc1f968a51cafd0d994ea5efed1570f584045398ccad7dc4ce4e34ea86ff5c2496119dc816105f1611a9a565b6119e95780610603611a9a565b60405163e2c11b8d60e01b81526004810187905260ff861660248201526001600160a01b0385811660448301528481166064830152608482018490527f0000000000000000000000000000000000000000000000000000000000000000169063e2c11b8d9060a401600060405180830381600087803b158015611a6b57600080fd5b505af1158015611a7f573d6000803e3d6000fd5b50505050505050505050565b6001600160a01b03163b151590565b6000611aa46127e8565b905090565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b158015611af657600080fd5b505afa158015611b0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc91906132ff565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b158015611b8d57600080fd5b505afa158015611ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc591906134de565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401611bf29291906134fb565b602060405180830381600087803b158015611c0c57600080fd5b505af1158015611c20573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e9190613321565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3611c71816105f1611a9a565b610a2d5780610603611a9a565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611cb657611cb18361284b565b505050565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611cef57600080fd5b505afa925050508015611d1f575060408051601f3d908101601f19168201909252611d1c91810190613321565b60015b611d825760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161062a565b60008051602061362b8339815191528114611df15760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161062a565b50611cb18383836128e7565b6000611e098585612153565b600081815261012f6020526040902054909150821115611e5857600081815261012f602052604090205482905b604051637f16270360e01b81526004810192909252602482015260440161062a565b600080611e708787611e698a610bf7565b88886122ad565b915091506000821315611ea057604051637f16270360e01b8152600481018590526024810182905260440161062a565b611ead61012d84866127af565b611eba61012f848661226a565b604051638063266d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638063266d90611f0f908a908a9089906000908190600401613496565b600060405180830381600087803b158015611f2957600080fd5b505af1158015611f3d573d6000803e3d6000fd5b505050600084815261012d60209081526040918290205482516001815291820188905281830152905188925060ff8a169160008051602061360b833981519152919081900360600190a3600083815261012f602090815260408083205481519384529183018790528281019190915251879160ff8a169160008051602061364b8339815191529181900360600190a350505050505050565b6000611fe18484612153565b600081815261012d602052604090205490915082111561201257600081815261012d60205260409020548290611e36565b61201f61012d828461226a565b61202c61012f82846127af565b604051630ce00fe760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630ce00fe790612081908790879087906000908190600401613496565b600060405180830381600087803b15801561209b57600080fd5b505af11580156120af573d6000803e3d6000fd5b505050600082815261012d602052604081205485925060ff87169160008051602061360b83398151915291869060408051931515845260208401929092529082015260600160405180910390a38260ff851660008051602061364b83398151915260018561212d61012f876000908152602091909152604090205490565b60408051931515845260208401929092529082015260600160405180910390a350505050565b6040805160f884901b6001600160f81b031916602080830191909152602180830194909452825180830390940184526041909101909152815191012060091b60ff909116176101001790565b6060610bcc838360405180606001604052806027815260200161366b6027913961290c565b600054610100900460ff16158080156121e45750600054600160ff909116105b806121fe5750303b1580156121fe575060005460ff166001145b61221a5760405162461bcd60e51b815260040161062a90613409565b6000805460ff19166001179055801561223d576000805461ff0019166101001790555b612246826129ac565b611154612b06565b600061225983612b73565b8015610bcc5750610bcc8383612ba6565b600082815260208490526040812080548392906122889084906134c7565b92505081905550808360010160008282546122a391906134c7565b9091555050505050565b60008080808060028860048111156122c7576122c7613047565b14156124ee57604051633af9bcb160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063ebe6f2c49061231d908d908d908c906004016132db565b60206040518083038186803b15801561233557600080fd5b505afa158015612349573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236d91906132ff565b6123965760405163d43dcbe160e01b815260ff8b166004820152602481018a905260440161062a565b60405163b3b68d8b60e01b815260ff8b166004820152602481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b1580156123ff57600080fd5b505afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124379190613321565b60405163cdf50e1760e01b815260ff8c166004820152602481018b90529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdf50e179060440160206040518083038186803b1580156124a357600080fd5b505afa1580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db9190613321565b91506124e78a8a610d23565b9050612776565b600388600481111561250257612502613047565b14156127765760006125138b6105a6565b60405163b3b68d8b60e01b815260ff82166004820152602481018c90529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b3b68d8b9060440160206040518083038186803b15801561257f57600080fd5b505afa158015612593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b79190613321565b9350836125e3576040516303905a9f60e11b815260ff82166004820152602481018b905260440161062a565b60405163cdf50e1760e01b815260ff82166004820152602481018b90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cdf50e179060440160206040518083038186803b15801561264c57600080fd5b505afa158015612660573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126849190613321565b6040516305aa21af60e31b815260ff83166004820152602481018c90529093507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632d510d789060440160206040518083038186803b1580156126f057600080fd5b505afa158015612704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127289190613321565b84612733838d6110c3565b61273d9190613350565b10156127685760405163dd2ef27760e01b815260ff82166004820152602481018b905260440161062a565b612772818b610d23565b9150505b612780838361352a565b61278a8783613372565b6127949190613457565b61279e848461352a565b945094505050509550959350505050565b600082815260208490526040812080548392906127cd908490613372565b92505081905550808360010160008282546122a39190613372565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415612846576000366128296014826134c7565b61283592369290613549565b61283e91613573565b60601c905090565b503390565b6001600160a01b0381163b6128b85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161062a565b60008051602061362b83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6128f083612c8f565b6000825111806128fd5750805b15611cb15761063e8383612ccf565b60606001600160a01b0384163b6129355760405162461bcd60e51b815260040161062a906135a8565b600080856001600160a01b03168560405161295091906135ee565b600060405180830381855af49150503d806000811461298b576040519150601f19603f3d011682016040523d82523d6000602084013e612990565b606091505b50915091506129a0828286612d84565b925050505b9392505050565b600054610100900460ff16158080156129cc5750600054600160ff909116105b806129e65750303b1580156129e6575060005460ff166001145b612a025760405162461bcd60e51b815260040161062a90613409565b6000805460ff191660011790558015612a25576000805461ff0019166101001790555b612a3f6001600160a01b038316637965db0b60e01b61224e565b612a7d576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b604482015260640161062a565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610a2d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611192565b600054610100900460ff16612b715760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161062a565b565b6000612b86826301ffc9a760e01b612ba6565b8015610bcf5750612b9f826001600160e01b0319612ba6565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612c0d9086906135ee565b6000604051808303818686fa925050503d8060008114612c49576040519150601f19603f3d011682016040523d82523d6000602084013e612c4e565b606091505b5091509150602081511015612c695760009350505050610bcf565b818015612c85575080806020019051810190612c8591906132ff565b9695505050505050565b612c988161284b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612cf85760405162461bcd60e51b815260040161062a906135a8565b600080846001600160a01b031684604051612d1391906135ee565b600060405180830381855af49150503d8060008114612d4e576040519150601f19603f3d011682016040523d82523d6000602084013e612d53565b606091505b5091509150612d7b828260405180606001604052806027815260200161366b60279139612d84565b95945050505050565b60608315612d935750816129a5565b825115612da35782518084602001fd5b8160405162461bcd60e51b815260040161062a919061300a565b803560ff81168114612dce57600080fd5b919050565b600060208284031215612de557600080fd5b610bcc82612dbd565b6001600160a01b038116811461072157600080fd5b600080600060408486031215612e1857600080fd5b8335612e2381612dee565b9250602084013567ffffffffffffffff80821115612e4057600080fd5b818601915086601f830112612e5457600080fd5b813581811115612e6357600080fd5b876020828501011115612e7557600080fd5b6020830194508093505050509250925092565b600060208284031215612e9a57600080fd5b81356129a581612dee565b600080600060608486031215612eba57600080fd5b612ec384612dbd565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215612f0157600080fd5b8235612f0c81612dee565b9150602083013567ffffffffffffffff80821115612f2957600080fd5b818501915085601f830112612f3d57600080fd5b813581811115612f4f57612f4f612ed8565b604051601f8201601f19908116603f01168101908382118183101715612f7757612f77612ed8565b81604052828152886020848701011115612f9057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015612fcd578181015183820152602001612fb5565b8381111561063e5750506000910152565b60008151808452612ff6816020860160208601612fb2565b601f01601f19169290920160200192915050565b602081526000610bcc6020830184612fde565b6000806040838503121561303057600080fd5b61303983612dbd565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6005811061307b57634e487b7160e01b600052602160045260246000fd5b9052565b60208101610bcf828461305d565b600080602083850312156130a057600080fd5b823567ffffffffffffffff808211156130b857600080fd5b818501915085601f8301126130cc57600080fd5b8135818111156130db57600080fd5b8660208260051b85010111156130f057600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561315757603f19888603018452613145858351612fde565b94509285019290850190600101613129565b5092979650505050505050565b60008060008060008060c0878903121561317d57600080fd5b8635955061318d60208801612dbd565b94506040870135935060608701356131a481612dee565b9598949750929560808101359460a0909101359350915050565b600080600080600060a086880312156131d657600080fd5b853594506131e660208701612dbd565b935060408601356131f681612dee565b9250606086013561320681612dee565b949793965091946080013592915050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60ff84168152606081016132c6602083018561305d565b6132d3604083018461305d565b949350505050565b60ff93909316835260208301919091526001600160a01b0316604082015260600190565b60006020828403121561331157600080fd5b815180151581146129a557600080fd5b60006020828403121561333357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008261336d57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156133855761338561333a565b500190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126133b757600080fd5b83018035915067ffffffffffffffff8211156133d257600080fd5b6020019150368190038213156133e757600080fd5b9250929050565b60006000198214156134025761340261333a565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008083128015600160ff1b8501841216156134755761347561333a565b6001600160ff1b03840183138116156134905761349061333a565b50500390565b60ff9590951685526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6000828210156134d9576134d961333a565b500390565b6000602082840312156134f057600080fd5b81516129a581612dee565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008160001904831182151516156135445761354461333a565b500290565b6000808585111561355957600080fd5b8386111561356657600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156135a05780818660140360031b1b83161692505b505092915050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251613600818460208701612fb2565b919091019291505056fe9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212206c177b31977f5d9bc5e480d5deaae16f0521fcfe6e4d53bded40cbc6afc144df64736f6c63430008090033",
}

// StakeAllocatorABI is the input ABI used to generate the binding from.
// Deprecated: Use StakeAllocatorMetaData.ABI instead.
var StakeAllocatorABI = StakeAllocatorMetaData.ABI

// StakeAllocatorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakeAllocatorMetaData.Bin instead.
var StakeAllocatorBin = StakeAllocatorMetaData.Bin

// DeployStakeAllocator deploys a new Ethereum contract, binding an instance of StakeAllocator to it.
func DeployStakeAllocator(auth *bind.TransactOpts, backend bind.ContractBackend, _forwarder common.Address, __subjectGateway common.Address, _rewardsDistributor common.Address) (common.Address, *types.Transaction, *StakeAllocator, error) {
	parsed, err := StakeAllocatorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakeAllocatorBin), backend, _forwarder, __subjectGateway, _rewardsDistributor)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &StakeAllocator{StakeAllocatorCaller: StakeAllocatorCaller{contract: contract}, StakeAllocatorTransactor: StakeAllocatorTransactor{contract: contract}, StakeAllocatorFilterer: StakeAllocatorFilterer{contract: contract}}, nil
}

// StakeAllocator is an auto generated Go binding around an Ethereum contract.
type StakeAllocator struct {
	StakeAllocatorCaller     // Read-only binding to the contract
	StakeAllocatorTransactor // Write-only binding to the contract
	StakeAllocatorFilterer   // Log filterer for contract events
}

// StakeAllocatorCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakeAllocatorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakeAllocatorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakeAllocatorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakeAllocatorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakeAllocatorSession struct {
	Contract     *StakeAllocator   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakeAllocatorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakeAllocatorCallerSession struct {
	Contract *StakeAllocatorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// StakeAllocatorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakeAllocatorTransactorSession struct {
	Contract     *StakeAllocatorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// StakeAllocatorRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakeAllocatorRaw struct {
	Contract *StakeAllocator // Generic contract binding to access the raw methods on
}

// StakeAllocatorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakeAllocatorCallerRaw struct {
	Contract *StakeAllocatorCaller // Generic read-only contract binding to access the raw methods on
}

// StakeAllocatorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakeAllocatorTransactorRaw struct {
	Contract *StakeAllocatorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStakeAllocator creates a new instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocator(address common.Address, backend bind.ContractBackend) (*StakeAllocator, error) {
	contract, err := bindStakeAllocator(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &StakeAllocator{StakeAllocatorCaller: StakeAllocatorCaller{contract: contract}, StakeAllocatorTransactor: StakeAllocatorTransactor{contract: contract}, StakeAllocatorFilterer: StakeAllocatorFilterer{contract: contract}}, nil
}

// NewStakeAllocatorCaller creates a new read-only instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorCaller(address common.Address, caller bind.ContractCaller) (*StakeAllocatorCaller, error) {
	contract, err := bindStakeAllocator(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorCaller{contract: contract}, nil
}

// NewStakeAllocatorTransactor creates a new write-only instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorTransactor(address common.Address, transactor bind.ContractTransactor) (*StakeAllocatorTransactor, error) {
	contract, err := bindStakeAllocator(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorTransactor{contract: contract}, nil
}

// NewStakeAllocatorFilterer creates a new log filterer instance of StakeAllocator, bound to a specific deployed contract.
func NewStakeAllocatorFilterer(address common.Address, filterer bind.ContractFilterer) (*StakeAllocatorFilterer, error) {
	contract, err := bindStakeAllocator(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorFilterer{contract: contract}, nil
}

// bindStakeAllocator binds a generic wrapper to an already deployed contract.
func bindStakeAllocator(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakeAllocatorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeAllocator *StakeAllocatorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeAllocator.Contract.StakeAllocatorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeAllocator *StakeAllocatorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.Contract.StakeAllocatorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeAllocator *StakeAllocatorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeAllocator.Contract.StakeAllocatorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_StakeAllocator *StakeAllocatorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _StakeAllocator.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_StakeAllocator *StakeAllocatorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_StakeAllocator *StakeAllocatorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _StakeAllocator.Contract.contract.Transact(opts, method, params...)
}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedDelegatorsStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedDelegatorsStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedDelegatorsStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedDelegatorsStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedDelegatorsStakePerManaged is a free data retrieval call binding the contract method 0x574ef613.
//
// Solidity: function allocatedDelegatorsStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedDelegatorsStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedDelegatorsStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedManagedStake(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedManagedStake", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedManagedStake(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedManagedStake(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedManagedStake is a free data retrieval call binding the contract method 0x9e4db100.
//
// Solidity: function allocatedManagedStake(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedManagedStake(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedManagedStake(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedOwnStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedOwnStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedOwnStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedOwnStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedOwnStakePerManaged is a free data retrieval call binding the contract method 0x993a364f.
//
// Solidity: function allocatedOwnStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedOwnStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedOwnStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedStakeFor(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedStakeFor", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakeFor is a free data retrieval call binding the contract method 0xc1bf97c8.
//
// Solidity: function allocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) AllocatedStakePerManaged(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "allocatedStakePerManaged", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) AllocatedStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// AllocatedStakePerManaged is a free data retrieval call binding the contract method 0xd39cbd12.
//
// Solidity: function allocatedStakePerManaged(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) AllocatedStakePerManaged(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.AllocatedStakePerManaged(&_StakeAllocator.CallOpts, subjectType, subject)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetDelegatedSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getDelegatedSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatedSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatedSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetDelegatorSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getDelegatorSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatorSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetDelegatorSubjectType(&_StakeAllocator.CallOpts, subjectType)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCaller) GetSubjectTypeAgency(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "getSubjectTypeAgency", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetSubjectTypeAgency(&_StakeAllocator.CallOpts, subjectType)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_StakeAllocator *StakeAllocatorCallerSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _StakeAllocator.Contract.GetSubjectTypeAgency(&_StakeAllocator.CallOpts, subjectType)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _StakeAllocator.Contract.IsTrustedForwarder(&_StakeAllocator.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_StakeAllocator *StakeAllocatorCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _StakeAllocator.Contract.IsTrustedForwarder(&_StakeAllocator.CallOpts, forwarder)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorSession) ProxiableUUID() ([32]byte, error) {
	return _StakeAllocator.Contract.ProxiableUUID(&_StakeAllocator.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_StakeAllocator *StakeAllocatorCallerSession) ProxiableUUID() ([32]byte, error) {
	return _StakeAllocator.Contract.ProxiableUUID(&_StakeAllocator.CallOpts)
}

// RewardsDistributor is a free data retrieval call binding the contract method 0x3f2a5540.
//
// Solidity: function rewardsDistributor() view returns(address)
func (_StakeAllocator *StakeAllocatorCaller) RewardsDistributor(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "rewardsDistributor")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardsDistributor is a free data retrieval call binding the contract method 0x3f2a5540.
//
// Solidity: function rewardsDistributor() view returns(address)
func (_StakeAllocator *StakeAllocatorSession) RewardsDistributor() (common.Address, error) {
	return _StakeAllocator.Contract.RewardsDistributor(&_StakeAllocator.CallOpts)
}

// RewardsDistributor is a free data retrieval call binding the contract method 0x3f2a5540.
//
// Solidity: function rewardsDistributor() view returns(address)
func (_StakeAllocator *StakeAllocatorCallerSession) RewardsDistributor() (common.Address, error) {
	return _StakeAllocator.Contract.RewardsDistributor(&_StakeAllocator.CallOpts)
}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCaller) UnallocatedStakeFor(opts *bind.CallOpts, subjectType uint8, subject *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "unallocatedStakeFor", subjectType, subject)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorSession) UnallocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.UnallocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// UnallocatedStakeFor is a free data retrieval call binding the contract method 0x6f096be8.
//
// Solidity: function unallocatedStakeFor(uint8 subjectType, uint256 subject) view returns(uint256)
func (_StakeAllocator *StakeAllocatorCallerSession) UnallocatedStakeFor(subjectType uint8, subject *big.Int) (*big.Int, error) {
	return _StakeAllocator.Contract.UnallocatedStakeFor(&_StakeAllocator.CallOpts, subjectType, subject)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _StakeAllocator.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorSession) Version() (string, error) {
	return _StakeAllocator.Contract.Version(&_StakeAllocator.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_StakeAllocator *StakeAllocatorCallerSession) Version() (string, error) {
	return _StakeAllocator.Contract.Version(&_StakeAllocator.CallOpts)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) AllocateDelegatorStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "allocateDelegatorStake", subjectType, subject, amount)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) AllocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateDelegatorStake is a paid mutator transaction binding the contract method 0xb18d6d53.
//
// Solidity: function allocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) AllocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) AllocateOwnStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "allocateOwnStake", subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) AllocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// AllocateOwnStake is a paid mutator transaction binding the contract method 0x499572af.
//
// Solidity: function allocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) AllocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.AllocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) DepositAllocation(opts *bind.TransactOpts, activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "depositAllocation", activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) DepositAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DepositAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DepositAllocation is a paid mutator transaction binding the contract method 0xdfb4308e.
//
// Solidity: function depositAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DepositAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DepositAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) DidTransferShares(opts *bind.TransactOpts, sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "didTransferShares", sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DidTransferShares(&_StakeAllocator.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.DidTransferShares(&_StakeAllocator.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorSession) DisableRouter() (*types.Transaction, error) {
	return _StakeAllocator.Contract.DisableRouter(&_StakeAllocator.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _StakeAllocator.Contract.DisableRouter(&_StakeAllocator.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "initialize", __manager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorSession) Initialize(__manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Initialize(&_StakeAllocator.TransactOpts, __manager)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address __manager) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) Initialize(__manager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Initialize(&_StakeAllocator.TransactOpts, __manager)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Multicall(&_StakeAllocator.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_StakeAllocator *StakeAllocatorTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.Multicall(&_StakeAllocator.TransactOpts, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetAccessManager(&_StakeAllocator.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetAccessManager(&_StakeAllocator.TransactOpts, newManager)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetName(&_StakeAllocator.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _StakeAllocator.Contract.SetName(&_StakeAllocator.TransactOpts, ensRegistry, ensName)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UnallocateDelegatorStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "unallocateDelegatorStake", subjectType, subject, amount)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) UnallocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateDelegatorStake is a paid mutator transaction binding the contract method 0xa14d787c.
//
// Solidity: function unallocateDelegatorStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UnallocateDelegatorStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateDelegatorStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UnallocateOwnStake(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "unallocateOwnStake", subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorSession) UnallocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UnallocateOwnStake is a paid mutator transaction binding the contract method 0x4edd0f24.
//
// Solidity: function unallocateOwnStake(uint8 subjectType, uint256 subject, uint256 amount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UnallocateOwnStake(subjectType uint8, subject *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UnallocateOwnStake(&_StakeAllocator.TransactOpts, subjectType, subject, amount)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeTo(&_StakeAllocator.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeTo(&_StakeAllocator.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeToAndCall(&_StakeAllocator.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _StakeAllocator.Contract.UpgradeToAndCall(&_StakeAllocator.TransactOpts, newImplementation, data)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactor) WithdrawAllocation(opts *bind.TransactOpts, activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.contract.Transact(opts, "withdrawAllocation", activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorSession) WithdrawAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.WithdrawAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// WithdrawAllocation is a paid mutator transaction binding the contract method 0xd0d87ac8.
//
// Solidity: function withdrawAllocation(uint256 activeSharesId, uint8 subjectType, uint256 subject, address allocator, uint256 stakeAmount, uint256 sharesAmount) returns()
func (_StakeAllocator *StakeAllocatorTransactorSession) WithdrawAllocation(activeSharesId *big.Int, subjectType uint8, subject *big.Int, allocator common.Address, stakeAmount *big.Int, sharesAmount *big.Int) (*types.Transaction, error) {
	return _StakeAllocator.Contract.WithdrawAllocation(&_StakeAllocator.TransactOpts, activeSharesId, subjectType, subject, allocator, stakeAmount, sharesAmount)
}

// StakeAllocatorAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the StakeAllocator contract.
type StakeAllocatorAccessManagerUpdatedIterator struct {
	Event *StakeAllocatorAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAccessManagerUpdated represents a AccessManagerUpdated event raised by the StakeAllocator contract.
type StakeAllocatorAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*StakeAllocatorAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAccessManagerUpdatedIterator{contract: _StakeAllocator.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAccessManagerUpdated)
				if err := _StakeAllocator.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAccessManagerUpdated(log types.Log) (*StakeAllocatorAccessManagerUpdated, error) {
	event := new(StakeAllocatorAccessManagerUpdated)
	if err := _StakeAllocator.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the StakeAllocator contract.
type StakeAllocatorAdminChangedIterator struct {
	Event *StakeAllocatorAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAdminChanged represents a AdminChanged event raised by the StakeAllocator contract.
type StakeAllocatorAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*StakeAllocatorAdminChangedIterator, error) {

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAdminChangedIterator{contract: _StakeAllocator.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAdminChanged) (event.Subscription, error) {

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAdminChanged)
				if err := _StakeAllocator.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAdminChanged(log types.Log) (*StakeAllocatorAdminChanged, error) {
	event := new(StakeAllocatorAdminChanged)
	if err := _StakeAllocator.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorAllocatedStakeIterator is returned from FilterAllocatedStake and is used to iterate over the raw logs and unpacked data for AllocatedStake events raised by the StakeAllocator contract.
type StakeAllocatorAllocatedStakeIterator struct {
	Event *StakeAllocatorAllocatedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorAllocatedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorAllocatedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorAllocatedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorAllocatedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorAllocatedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorAllocatedStake represents a AllocatedStake event raised by the StakeAllocator contract.
type StakeAllocatorAllocatedStake struct {
	SubjectType    uint8
	Subject        *big.Int
	Increase       bool
	Amount         *big.Int
	TotalAllocated *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAllocatedStake is a free log retrieval operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) FilterAllocatedStake(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*StakeAllocatorAllocatedStakeIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "AllocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorAllocatedStakeIterator{contract: _StakeAllocator.contract, event: "AllocatedStake", logs: logs, sub: sub}, nil
}

// WatchAllocatedStake is a free log subscription operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) WatchAllocatedStake(opts *bind.WatchOpts, sink chan<- *StakeAllocatorAllocatedStake, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "AllocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorAllocatedStake)
				if err := _StakeAllocator.contract.UnpackLog(event, "AllocatedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAllocatedStake is a log parse operation binding the contract event 0x9e009ff93760292d06553768f140250c353d75b30af8863bce15ca17397f89cf.
//
// Solidity: event AllocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) ParseAllocatedStake(log types.Log) (*StakeAllocatorAllocatedStake, error) {
	event := new(StakeAllocatorAllocatedStake)
	if err := _StakeAllocator.contract.UnpackLog(event, "AllocatedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the StakeAllocator contract.
type StakeAllocatorBeaconUpgradedIterator struct {
	Event *StakeAllocatorBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorBeaconUpgraded represents a BeaconUpgraded event raised by the StakeAllocator contract.
type StakeAllocatorBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*StakeAllocatorBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorBeaconUpgradedIterator{contract: _StakeAllocator.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *StakeAllocatorBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorBeaconUpgraded)
				if err := _StakeAllocator.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_StakeAllocator *StakeAllocatorFilterer) ParseBeaconUpgraded(log types.Log) (*StakeAllocatorBeaconUpgraded, error) {
	event := new(StakeAllocatorBeaconUpgraded)
	if err := _StakeAllocator.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the StakeAllocator contract.
type StakeAllocatorInitializedIterator struct {
	Event *StakeAllocatorInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorInitialized represents a Initialized event raised by the StakeAllocator contract.
type StakeAllocatorInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) FilterInitialized(opts *bind.FilterOpts) (*StakeAllocatorInitializedIterator, error) {

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorInitializedIterator{contract: _StakeAllocator.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *StakeAllocatorInitialized) (event.Subscription, error) {

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorInitialized)
				if err := _StakeAllocator.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_StakeAllocator *StakeAllocatorFilterer) ParseInitialized(log types.Log) (*StakeAllocatorInitialized, error) {
	event := new(StakeAllocatorInitialized)
	if err := _StakeAllocator.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the StakeAllocator contract.
type StakeAllocatorRouterUpdatedIterator struct {
	Event *StakeAllocatorRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorRouterUpdated represents a RouterUpdated event raised by the StakeAllocator contract.
type StakeAllocatorRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*StakeAllocatorRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorRouterUpdatedIterator{contract: _StakeAllocator.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *StakeAllocatorRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorRouterUpdated)
				if err := _StakeAllocator.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_StakeAllocator *StakeAllocatorFilterer) ParseRouterUpdated(log types.Log) (*StakeAllocatorRouterUpdated, error) {
	event := new(StakeAllocatorRouterUpdated)
	if err := _StakeAllocator.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorUnallocatedStakeIterator is returned from FilterUnallocatedStake and is used to iterate over the raw logs and unpacked data for UnallocatedStake events raised by the StakeAllocator contract.
type StakeAllocatorUnallocatedStakeIterator struct {
	Event *StakeAllocatorUnallocatedStake // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorUnallocatedStakeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorUnallocatedStake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorUnallocatedStake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorUnallocatedStakeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorUnallocatedStakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorUnallocatedStake represents a UnallocatedStake event raised by the StakeAllocator contract.
type StakeAllocatorUnallocatedStake struct {
	SubjectType    uint8
	Subject        *big.Int
	Increase       bool
	Amount         *big.Int
	TotalAllocated *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUnallocatedStake is a free log retrieval operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) FilterUnallocatedStake(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*StakeAllocatorUnallocatedStakeIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "UnallocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorUnallocatedStakeIterator{contract: _StakeAllocator.contract, event: "UnallocatedStake", logs: logs, sub: sub}, nil
}

// WatchUnallocatedStake is a free log subscription operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) WatchUnallocatedStake(opts *bind.WatchOpts, sink chan<- *StakeAllocatorUnallocatedStake, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "UnallocatedStake", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorUnallocatedStake)
				if err := _StakeAllocator.contract.UnpackLog(event, "UnallocatedStake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnallocatedStake is a log parse operation binding the contract event 0x20c25d31eac18b20ec833a1a81b17835569ad58cea6706c94b15452114d730f0.
//
// Solidity: event UnallocatedStake(uint8 indexed subjectType, uint256 indexed subject, bool increase, uint256 amount, uint256 totalAllocated)
func (_StakeAllocator *StakeAllocatorFilterer) ParseUnallocatedStake(log types.Log) (*StakeAllocatorUnallocatedStake, error) {
	event := new(StakeAllocatorUnallocatedStake)
	if err := _StakeAllocator.contract.UnpackLog(event, "UnallocatedStake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakeAllocatorUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the StakeAllocator contract.
type StakeAllocatorUpgradedIterator struct {
	Event *StakeAllocatorUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakeAllocatorUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakeAllocatorUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakeAllocatorUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakeAllocatorUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakeAllocatorUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakeAllocatorUpgraded represents a Upgraded event raised by the StakeAllocator contract.
type StakeAllocatorUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*StakeAllocatorUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _StakeAllocator.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &StakeAllocatorUpgradedIterator{contract: _StakeAllocator.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *StakeAllocatorUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _StakeAllocator.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakeAllocatorUpgraded)
				if err := _StakeAllocator.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_StakeAllocator *StakeAllocatorFilterer) ParseUpgraded(log types.Log) (*StakeAllocatorUpgraded, error) {
	event := new(StakeAllocatorUpgraded)
	if err := _StakeAllocator.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
