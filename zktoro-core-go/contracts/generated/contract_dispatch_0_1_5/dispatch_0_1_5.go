// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_dispatch_0_1_5

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// DispatchMetaData contains all meta data concerning the Dispatch contract.
var DispatchMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"AlreadyLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"Link\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetAgentRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetScannerPoolRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"SetScannerRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"agentAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"agentHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"manifest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"agentRefAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"disabledFlags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRegistry\",\"outputs\":[{\"internalType\":\"contractAgentRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"areTheyLinked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__agents\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__scanners\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__scannerPools\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"link\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"numAgentsFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"numScannersFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"scannerAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"scannerHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"manifest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scannerPoolRegistry\",\"outputs\":[{\"internalType\":\"contractScannerPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"}],\"name\":\"scannerRefAt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"operational\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scannerRegistry\",\"outputs\":[{\"internalType\":\"contractScannerRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAgentRegistry\",\"type\":\"address\"}],\"name\":\"setAgentRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newScannerPoolRegistry\",\"type\":\"address\"}],\"name\":\"setScannerPoolRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newScannerRegistry\",\"type\":\"address\"}],\"name\":\"setScannerRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"unlink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b506040516200352138038062003521833981016040819052620000389162000180565b6001600160a01b038116608052600054610100900460ff1615808015620000665750600054600160ff909116105b8062000096575062000083306200017160201b620014c81760201c565b15801562000096575060005460ff166001145b620000fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000122576000805461ff0019166101001790555b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050620001b2565b6001600160a01b03163b151590565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b60805160a051613326620001fb600039600081816109010152818161094101528181610a1201528181610a520152610ae10152600081816103800152611f6f01526133266000f3fe60806040526004361061019c5760003560e01c80635e9f88b1116100ec578063bd3c3a1a1161008a578063cde574fe11610064578063cde574fe14610534578063d858a7e514610553578063e47db78714610568578063f8c8765e1461058857600080fd5b8063bd3c3a1a146104d4578063c2c2e46a146104f4578063c95808041461051457600080fd5b80638b2e98d6116100c65780638b2e98d61461041f5780639fc2d00014610452578063ac9650d814610472578063b1774f9d1461049f57600080fd5b80635e9f88b1146103c05780636b254492146103df57806386cf48e7146103ff57600080fd5b80633659cfe6116101595780634f1ef286116101335780634f1ef286146102fd57806352d1902d1461031057806354fd4d5014610325578063572b6c051461036357600080fd5b80633659cfe61461029d5780633820d243146102bd5780633ce22acf146102dd57600080fd5b80630c65b39d146101a15780630d1cfcae146101c35780630d80a136146101fb57806328342ecf146102295780633121db1c1461024957806332dee2f614610269575b600080fd5b3480156101ad57600080fd5b506101c16101bc3660046126fc565b6105a8565b005b3480156101cf57600080fd5b5061012d546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561020757600080fd5b5061021b6102163660046126fc565b6107ab565b6040519081526020016101f2565b34801561023557600080fd5b506101c1610244366004612733565b6107cd565b34801561025557600080fd5b506101c1610264366004612750565b6107f5565b34801561027557600080fd5b506102896102843660046126fc565b610840565b6040516101f298979695949392919061282c565b3480156102a957600080fd5b506101c16102b8366004612733565b6108f6565b3480156102c957600080fd5b5061021b6102d83660046128bf565b6109d6565b3480156102e957600080fd5b5061021b6102f83660046126fc565b6109ee565b6101c161030b366004612945565b610a07565b34801561031c57600080fd5b5061021b610ad4565b34801561033157600080fd5b5061035660405180604001604052806005815260200164302e312e3560d81b81525081565b6040516101f291906129d7565b34801561036f57600080fd5b506103b061037e366004612733565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016101f2565b3480156103cc57600080fd5b5061012e546001600160a01b03166101de565b3480156103eb57600080fd5b506101c16103fa366004612733565b610b87565b34801561040b57600080fd5b506101c161041a3660046126fc565b610bab565b34801561042b57600080fd5b5061043f61043a3660046126fc565b610d67565b6040516101f297969594939291906129ea565b34801561045e57600080fd5b506101c161046d366004612733565b610d9f565b34801561047e57600080fd5b5061049261048d366004612a3a565b610dc3565b6040516101f29190612aae565b3480156104ab57600080fd5b506104bf6104ba3660046128bf565b610eb7565b604080519283526020830191909152016101f2565b3480156104e057600080fd5b5061021b6104ef3660046128bf565b611146565b34801561050057600080fd5b506104bf61050f3660046128bf565b61115e565b34801561052057600080fd5b506101c161052f366004612733565b61125c565b34801561054057600080fd5b50610131546001600160a01b03166101de565b34801561055f57600080fd5b506101c161131a565b34801561057457600080fd5b506103b06105833660046126fc565b6113a5565b34801561059457600080fd5b506101c16105a3366004612b10565b6113de565b7ffbd38eecf51668fdbc772b204dc63dd28c3a3cf32e3025f52a80aa807359f50c6105da816105d56114d7565b6114e6565b61061757806105e76114d7565b6040516301d4003760e61b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b61012d54604051630af34d3160e31b8152600481018590526001600160a01b039091169063579a69889060240160206040518083038186803b15801561065c57600080fd5b505afa158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190612b7c565b6106b3578260405163b087f9a560e01b815260040161060e9190612b97565b6106bc8261156b565b6106db578160405163b087f9a560e01b815260040161060e9190612bca565b600082815261012f602052604090206106f490846116a4565b1580610716575060008381526101306020526040902061071490836116a4565b155b156107655760408051848152602081018490526000918101919091527f3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430906060015b60405180910390a1505050565b60408051848152602081018490526000918101919091527ff1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf90606001610758565b505050565b6000828152610130602052604081206107c490836116b0565b90505b92915050565b60006107db816105d56114d7565b6107e857806105e76114d7565b6107f1826116bc565b5050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610822816105d56114d7565b61082f57806105e76114d7565b61083a84848461175c565b50505050565b6000806000806060806000806108568a8a6109ee565b61012d54604051631e4def8360e01b8152600481018390529197506001600160a01b031690631e4def839060240160006040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d89190810190612cbd565b959d50939b5091985096509450925090509295985092959890939650565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561093f5760405162461bcd60e51b815260040161060e90612d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166109886000805160206132aa833981519152546001600160a01b031690565b6001600160a01b0316146109ae5760405162461bcd60e51b815260040161060e90612db4565b6109b781611872565b604080516000808252602082019092526109d3918391906118ac565b50565b6000818152610130602052604081206107c790611a26565b600082815261012f602052604081206107c490836116b0565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610a505760405162461bcd60e51b815260040161060e90612d68565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a996000805160206132aa833981519152546001600160a01b031690565b6001600160a01b031614610abf5760405162461bcd60e51b815260040161060e90612db4565b610ac882611872565b6107f1828260016118ac565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b745760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161060e565b506000805160206132aa83398151915290565b6000610b95816105d56114d7565b610ba257806105e76114d7565b6107f182611a30565b7ffbd38eecf51668fdbc772b204dc63dd28c3a3cf32e3025f52a80aa807359f50c610bd8816105d56114d7565b610be557806105e76114d7565b61012d546040516331e0c0d360e21b8152600481018590526001600160a01b039091169063c783034c9060240160206040518083038186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c629190612b7c565b610c7f57604051631429691d60e01b815260040161060e90612e00565b610c8882611acb565b610ca557604051631429691d60e01b815260040161060e90612e25565b600082815261012f60205260409020610cbe9084611bb3565b1580610ce05750600083815261013060205260409020610cde9083611bb3565b155b15610d265760408051848152602081018490526001918101919091527f3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a43090606001610758565b60408051848152602081018490526001918101919091527ff1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf90606001610758565b6000806000806060600080610d7c89896107ab565b9550610d8786611bbf565b949e9a9d50929b509099509790965090945092505050565b6000610dad816105d56114d7565b610dba57806105e76114d7565b6107f182611d8b565b6060816001600160401b03811115610ddd57610ddd6128d8565b604051908082528060200260200182016040528015610e1057816020015b6060815260200190600190039081610dfb5790505b50905060005b82811015610eb057610e8030858584818110610e3457610e34612e4c565b9050602002810190610e469190612e62565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e2a92505050565b828281518110610e9257610e92612e4c565b60200260200101819052508080610ea890612ec5565b915050610e16565b5092915050565b600081815261012f6020526040812081908190610ed390611e4f565b9050600081516001600160401b03811115610ef057610ef06128d8565b604051908082528060200260200182016040528015610f19578160200160208202803683370190505b509050600082516001600160401b03811115610f3757610f376128d8565b604051908082528060200260200182016040528015610f60578160200160208202803683370190505b50905060005b835181101561110c5761012d5484516001600160a01b0390911690632de5aaf790869084908110610f9957610f99612e4c565b60200260200101516040518263ffffffff1660e01b8152600401610fbf91815260200190565b60006040518083038186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110139190810190612ee0565b505085519092508591508390811061102d5761102d612e4c565b602090810291909101015261012d5484516001600160a01b039091169063c783034c9086908490811061106257611062612e4c565b60200260200101516040518263ffffffff1660e01b815260040161108891815260200190565b60206040518083038186803b1580156110a057600080fd5b505afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190612b7c565b8282815181106110ea576110ea612e4c565b911515602092830291909101909101528061110481612ec5565b915050610f66565b50825183838360405160200161112493929190612fce565b6040516020818303038152906040528051906020012094509450505050915091565b600081815261012f602052604081206107c790611a26565b6000818152610130602052604081208190819061117a90611e4f565b9050600081516001600160401b03811115611197576111976128d8565b6040519080825280602002602001820160405280156111c0578160200160208202803683370190505b50905060005b8251811015611225576111f18382815181106111e4576111e4612e4c565b6020026020010151611acb565b82828151811061120357611203612e4c565b911515602092830291909101909101528061121d81612ec5565b9150506111c6565b508151828260405160200161123b929190612fec565b60405160208183030381529060405280519060200120935093505050915091565b600061126a816105d56114d7565b61127757806105e76114d7565b6112916001600160a01b038316637965db0b60e01b611e63565b6112cf576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b604482015260640161060e565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b6065546001600160a01b03166113685760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b604482015260640161060e565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b600081815261012f602052604081206113be9084611e7f565b80156107c457506000838152610130602052604090206107c49083611e7f565b600054610100900460ff16158080156113fe5750600054600160ff909116105b806114185750303b158015611418575060005460ff166001145b6114345760405162461bcd60e51b815260040161060e90612ffb565b6000805460ff191660011790558015611457576000805461ff0019166101001790555b61146085611e97565b611469846116bc565b61147283611a30565b61147b82611d8b565b80156114c1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6001600160a01b03163b151590565b60006114e1611f6b565b905090565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c49190612b7c565b61012e5460408051637cf1140d60e01b815290516000926001600160a01b031691637cf1140d916004808301926020929190829003018186803b1580156115b157600080fd5b505afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e99190612b7c565b1561166d576101315460405163760d0d3960e01b81526001600160a01b0384811660048301529091169063760d0d39906024015b60206040518083038186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190612b7c565b61012e54604051630af34d3160e31b8152600481018490526001600160a01b039091169063579a69889060240161161d565b919050565b60006107c48383611fce565b60006107c483836120c1565b6001600160a01b0381166117065760405163eac0d38960e01b815260206004820152601060248201526f6e65774167656e74526567697374727960801b604482015260640161060e565b61012d80546001600160a01b0319166001600160a01b0383169081179091556040519081527f7ea96f920e6433e8aa66b24f7acde4c42293bbf4e9805d363021eba0b386e163906020015b60405180910390a150565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b1580156117bb57600080fd5b505afa1580156117cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f39190613049565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401611820929190613066565b602060405180830381600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190613095565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361189f816105d56114d7565b6107f157806105e76114d7565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156118df576107a6836120eb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561191857600080fd5b505afa925050508015611948575060408051601f3d908101601f1916820190925261194591810190613095565b60015b6119ab5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161060e565b6000805160206132aa8339815191528114611a1a5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161060e565b506107a6838383612187565b60006107c7825490565b6001600160a01b038116611a7c5760405163eac0d38960e01b81526020600482015260126024820152716e65775363616e6e6572526567697374727960701b604482015260640161060e565b61012e80546001600160a01b0319166001600160a01b0383169081179091556040519081527f9acdcee0386aa30d54ad4cb99c70ebba3ba481570721e43c743d305f8448158890602001611751565b61012e5460408051637cf1140d60e01b815290516000926001600160a01b031691637cf1140d916004808301926020929190829003018186803b158015611b1157600080fd5b505afa158015611b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b499190612b7c565b15611b815761013154604051630911b7b360e41b81526001600160a01b0384811660048301529091169063911b7b309060240161161d565b61012e546040516331e0c0d360e21b8152600481018490526001600160a01b039091169063c783034c9060240161161d565b60006107c483836121ac565b6000806000606060008061012e60009054906101000a90046001600160a01b03166001600160a01b0316637cf1140d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c1857600080fd5b505afa158015611c2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c509190612b7c565b15611ce85761013154604051637434d8e760e01b81526001600160a01b03898116600483015290911690637434d8e79060240160006040518083038186803b158015611c9b57600080fd5b505afa158015611caf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611cd791908101906130ae565b955095509550955095509550611d82565b61012e546040516301bff50760e51b8152600481018990526000916001600160a01b0316906337fea0e09060240160006040518083038186803b158015611d2e57600080fd5b505afa158015611d42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d6a9190810190613138565b949b509299509097509550935015159150611d829050565b91939550919395565b6001600160a01b038116611ddb5760405163eac0d38960e01b81526020600482015260166024820152756e65775363616e6e6572506f6f6c526567697374727960501b604482015260640161060e565b61013180546001600160a01b0319166001600160a01b0383169081179091556040519081527f984a0c5e78a5050e00ce4650502487cabd7140cdd3cb17fc141aff267a496f6190602001611751565b60606107c483836040518060600160405280602781526020016132ca602791396121fb565b60606000611e5c83612299565b9392505050565b6000611e6e836122f5565b80156107c457506107c48383612328565b600081815260018301602052604081205415156107c4565b600054610100900460ff1615808015611eb75750600054600160ff909116105b80611ed15750303b158015611ed1575060005460ff166001145b611eed5760405162461bcd60e51b815260040161060e90612ffb565b6000805460ff191660011790558015611f10576000805461ff0019166101001790555b611f1982612407565b611f21612561565b80156107f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316331415611fc957600036611fac6014826131bb565b611fb8923692906131d2565b611fc1916131fc565b60601c905090565b503390565b600081815260018301602052604081205480156120b7576000611ff26001836131bb565b8554909150600090612006906001906131bb565b905081811461206b57600086600001828154811061202657612026612e4c565b906000526020600020015490508087600001848154811061204957612049612e4c565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061207c5761207c613231565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107c7565b60009150506107c7565b60008260000182815481106120d8576120d8612e4c565b9060005260206000200154905092915050565b6001600160a01b0381163b6121585760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161060e565b6000805160206132aa83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612190836125ce565b60008251118061219d5750805b156107a65761083a838361260e565b60008181526001830160205260408120546121f3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107c7565b5060006107c7565b60606001600160a01b0384163b6122245760405162461bcd60e51b815260040161060e90613247565b600080856001600160a01b03168560405161223f919061328d565b600060405180830381855af49150503d806000811461227a576040519150601f19603f3d011682016040523d82523d6000602084013e61227f565b606091505b509150915061228f8282866126c3565b9695505050505050565b6060816000018054806020026020016040519081016040528092919081815260200182805480156122e957602002820191906000526020600020905b8154815260200190600101908083116122d5575b50505050509050919050565b6000612308826301ffc9a760e01b612328565b80156107c75750612321826001600160e01b0319612328565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061238f90869061328d565b6000604051808303818686fa925050503d80600081146123cb576040519150601f19603f3d011682016040523d82523d6000602084013e6123d0565b606091505b50915091506020815110156123eb57600093505050506107c7565b81801561228f57508080602001905181019061228f9190612b7c565b600054610100900460ff16158080156124275750600054600160ff909116105b806124415750303b158015612441575060005460ff166001145b61245d5760405162461bcd60e51b815260040161060e90612ffb565b6000805460ff191660011790558015612480576000805461ff0019166101001790555b61249a6001600160a01b038316637965db0b60e01b611e63565b6124d8576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b604482015260640161060e565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a280156107f1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611f5f565b600054610100900460ff166125cc5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161060e565b565b6125d7816120eb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6126375760405162461bcd60e51b815260040161060e90613247565b600080846001600160a01b031684604051612652919061328d565b600060405180830381855af49150503d806000811461268d576040519150601f19603f3d011682016040523d82523d6000602084013e612692565b606091505b50915091506126ba82826040518060600160405280602781526020016132ca602791396126c3565b95945050505050565b606083156126d2575081611e5c565b8251156126e25782518084602001fd5b8160405162461bcd60e51b815260040161060e91906129d7565b6000806040838503121561270f57600080fd5b50508035926020909101359150565b6001600160a01b03811681146109d357600080fd5b60006020828403121561274557600080fd5b8135611e5c8161271e565b60008060006040848603121561276557600080fd5b83356127708161271e565b925060208401356001600160401b038082111561278c57600080fd5b818601915086601f8301126127a057600080fd5b8135818111156127af57600080fd5b8760208285010111156127c157600080fd5b6020830194508093505050509250925092565b60005b838110156127ef5781810151838201526020016127d7565b8381111561083a5750506000910152565b600081518084526128188160208601602086016127d4565b601f01601f19169290920160200192915050565b60006101008a15158352602060018060a01b038b168185015289604085015288606085015281608085015261286382850189612800565b84810360a0860152875180825282890193509082019060005b818110156128985784518352938301939183019160010161287c565b505086151560c086015292506128ac915050565b8260e08301529998505050505050505050565b6000602082840312156128d157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612916576129166128d8565b604052919050565b60006001600160401b03821115612937576129376128d8565b50601f01601f191660200190565b6000806040838503121561295857600080fd5b82356129638161271e565b915060208301356001600160401b0381111561297e57600080fd5b8301601f8101851361298f57600080fd5b80356129a261299d8261291e565b6128ee565b8181528660208385010111156129b757600080fd5b816020840160208301376000602083830101528093505050509250929050565b6020815260006107c46020830184612800565b871515815286602082015260018060a01b038616604082015284606082015260e060808201526000612a1f60e0830186612800565b93151560a08301525090151560c09091015295945050505050565b60008060208385031215612a4d57600080fd5b82356001600160401b0380821115612a6457600080fd5b818501915085601f830112612a7857600080fd5b813581811115612a8757600080fd5b8660208260051b8501011115612a9c57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015612b0357603f19888603018452612af1858351612800565b94509285019290850190600101612ad5565b5092979650505050505050565b60008060008060808587031215612b2657600080fd5b8435612b318161271e565b93506020850135612b418161271e565b92506040850135612b518161271e565b91506060850135612b618161271e565b939692955090935050565b8051801515811461169f57600080fd5b600060208284031215612b8e57600080fd5b6107c482612b6c565b604081526000612bbc6040830160058152641059d95b9d60da1b602082015260400190565b905082602083015292915050565b604081526000612bbc60408301600781526629b1b0b73732b960c91b602082015260400190565b600082601f830112612c0257600080fd5b8151612c1061299d8261291e565b818152846020838601011115612c2557600080fd5b612c368260208301602087016127d4565b949350505050565b600082601f830112612c4f57600080fd5b815160206001600160401b03821115612c6a57612c6a6128d8565b8160051b612c798282016128ee565b9283528481018201928281019087851115612c9357600080fd5b83870192505b84831015612cb257825182529183019190830190612c99565b979650505050505050565b600080600080600080600060e0888a031215612cd857600080fd5b612ce188612b6c565b96506020880151612cf18161271e565b604089015160608a015191975095506001600160401b0380821115612d1557600080fd5b612d218b838c01612bf1565b955060808a0151915080821115612d3757600080fd5b50612d448a828b01612c3e565b935050612d5360a08901612b6c565b915060c0880151905092959891949750929550565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020815260006107c76020830160058152641059d95b9d60da1b602082015260400190565b6020815260006107c760208301600781526629b1b0b73732b960c91b602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612e7957600080fd5b8301803591506001600160401b03821115612e9357600080fd5b602001915036819003821315612ea857600080fd5b9250929050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415612ed957612ed9612eaf565b5060010190565b600080600080600060a08688031215612ef857600080fd5b612f0186612b6c565b94506020860151612f118161271e565b6040870151606088015191955093506001600160401b0380821115612f3557600080fd5b612f4189838a01612bf1565b93506080880151915080821115612f5757600080fd5b50612f6488828901612c3e565b9150509295509295909350565b60008151602080840160005b83811015612f9957815187529582019590820190600101612f7d565b509495945050505050565b60008151602080840160005b83811015612f99578151151587529582019590820190600101612fb0565b60006126ba612fe6612fe08488612f71565b86612f71565b84612fa4565b6000612c36612fe68386612f71565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561305b57600080fd5b8151611e5c8161271e565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000602082840312156130a757600080fd5b5051919050565b60008060008060008060c087890312156130c757600080fd5b6130d087612b6c565b955060208701516130e08161271e565b6040880151606089015191965094506001600160401b0381111561310357600080fd5b61310f89828a01612bf1565b93505061311e60808801612b6c565b915061312c60a08801612b6c565b90509295509295509295565b60008060008060008060c0878903121561315157600080fd5b61315a87612b6c565b9550602087015161316a8161271e565b6040880151606089015191965094506001600160401b0381111561318d57600080fd5b61319989828a01612bf1565b9350506131a860808801612b6c565b915060a087015190509295509295509295565b6000828210156131cd576131cd612eaf565b500390565b600080858511156131e257600080fd5b838611156131ef57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156132295780818660140360031b1b83161692505b505092915050565b634e487b7160e01b600052603160045260246000fd5b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b6000825161329f8184602087016127d4565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220de3a4eb3560f8a2fce8d3e62057c0a2f4ce9492c9a8a7c9019aebdb9270353bd64736f6c63430008090033",
}

// DispatchABI is the input ABI used to generate the binding from.
// Deprecated: Use DispatchMetaData.ABI instead.
var DispatchABI = DispatchMetaData.ABI

// DispatchBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DispatchMetaData.Bin instead.
var DispatchBin = DispatchMetaData.Bin

// DeployDispatch deploys a new Ethereum contract, binding an instance of Dispatch to it.
func DeployDispatch(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *Dispatch, error) {
	parsed, err := DispatchMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DispatchBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Dispatch{DispatchCaller: DispatchCaller{contract: contract}, DispatchTransactor: DispatchTransactor{contract: contract}, DispatchFilterer: DispatchFilterer{contract: contract}}, nil
}

// Dispatch is an auto generated Go binding around an Ethereum contract.
type Dispatch struct {
	DispatchCaller     // Read-only binding to the contract
	DispatchTransactor // Write-only binding to the contract
	DispatchFilterer   // Log filterer for contract events
}

// DispatchCaller is an auto generated read-only Go binding around an Ethereum contract.
type DispatchCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DispatchTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DispatchFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DispatchSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DispatchSession struct {
	Contract     *Dispatch         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DispatchCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DispatchCallerSession struct {
	Contract *DispatchCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// DispatchTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DispatchTransactorSession struct {
	Contract     *DispatchTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DispatchRaw is an auto generated low-level Go binding around an Ethereum contract.
type DispatchRaw struct {
	Contract *Dispatch // Generic contract binding to access the raw methods on
}

// DispatchCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DispatchCallerRaw struct {
	Contract *DispatchCaller // Generic read-only contract binding to access the raw methods on
}

// DispatchTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DispatchTransactorRaw struct {
	Contract *DispatchTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDispatch creates a new instance of Dispatch, bound to a specific deployed contract.
func NewDispatch(address common.Address, backend bind.ContractBackend) (*Dispatch, error) {
	contract, err := bindDispatch(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Dispatch{DispatchCaller: DispatchCaller{contract: contract}, DispatchTransactor: DispatchTransactor{contract: contract}, DispatchFilterer: DispatchFilterer{contract: contract}}, nil
}

// NewDispatchCaller creates a new read-only instance of Dispatch, bound to a specific deployed contract.
func NewDispatchCaller(address common.Address, caller bind.ContractCaller) (*DispatchCaller, error) {
	contract, err := bindDispatch(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DispatchCaller{contract: contract}, nil
}

// NewDispatchTransactor creates a new write-only instance of Dispatch, bound to a specific deployed contract.
func NewDispatchTransactor(address common.Address, transactor bind.ContractTransactor) (*DispatchTransactor, error) {
	contract, err := bindDispatch(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DispatchTransactor{contract: contract}, nil
}

// NewDispatchFilterer creates a new log filterer instance of Dispatch, bound to a specific deployed contract.
func NewDispatchFilterer(address common.Address, filterer bind.ContractFilterer) (*DispatchFilterer, error) {
	contract, err := bindDispatch(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DispatchFilterer{contract: contract}, nil
}

// bindDispatch binds a generic wrapper to an already deployed contract.
func bindDispatch(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DispatchABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dispatch *DispatchRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Dispatch.Contract.DispatchCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dispatch *DispatchRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dispatch.Contract.DispatchTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dispatch *DispatchRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dispatch.Contract.DispatchTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Dispatch *DispatchCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Dispatch.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Dispatch *DispatchTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dispatch.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Dispatch *DispatchTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Dispatch.Contract.contract.Transact(opts, method, params...)
}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCaller) AgentAt(opts *bind.CallOpts, scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentAt", scannerId, pos)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchSession) AgentAt(scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.AgentAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentAt is a free data retrieval call binding the contract method 0x3ce22acf.
//
// Solidity: function agentAt(uint256 scannerId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCallerSession) AgentAt(scannerId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.AgentAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCaller) AgentHash(opts *bind.CallOpts, agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentHash", agentId)

	outstruct := new(struct {
		Length   *big.Int
		Manifest [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Length = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Manifest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchSession) AgentHash(agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.AgentHash(&_Dispatch.CallOpts, agentId)
}

// AgentHash is a free data retrieval call binding the contract method 0xc2c2e46a.
//
// Solidity: function agentHash(uint256 agentId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCallerSession) AgentHash(agentId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.AgentHash(&_Dispatch.CallOpts, agentId)
}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_Dispatch *DispatchCaller) AgentRefAt(opts *bind.CallOpts, scannerId *big.Int, pos *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentId       *big.Int
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentRefAt", scannerId, pos)

	outstruct := new(struct {
		Registered    bool
		Owner         common.Address
		AgentId       *big.Int
		AgentVersion  *big.Int
		Metadata      string
		ChainIds      []*big.Int
		Enabled       bool
		DisabledFlags *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.AgentVersion = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[5], new([]*big.Int)).(*[]*big.Int)
	outstruct.Enabled = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.DisabledFlags = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_Dispatch *DispatchSession) AgentRefAt(scannerId *big.Int, pos *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentId       *big.Int
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _Dispatch.Contract.AgentRefAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentRefAt is a free data retrieval call binding the contract method 0x32dee2f6.
//
// Solidity: function agentRefAt(uint256 scannerId, uint256 pos) view returns(bool registered, address owner, uint256 agentId, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_Dispatch *DispatchCallerSession) AgentRefAt(scannerId *big.Int, pos *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentId       *big.Int
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _Dispatch.Contract.AgentRefAt(&_Dispatch.CallOpts, scannerId, pos)
}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchCaller) AgentRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "agentRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchSession) AgentRegistry() (common.Address, error) {
	return _Dispatch.Contract.AgentRegistry(&_Dispatch.CallOpts)
}

// AgentRegistry is a free data retrieval call binding the contract method 0x0d1cfcae.
//
// Solidity: function agentRegistry() view returns(address)
func (_Dispatch *DispatchCallerSession) AgentRegistry() (common.Address, error) {
	return _Dispatch.Contract.AgentRegistry(&_Dispatch.CallOpts)
}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchCaller) AreTheyLinked(opts *bind.CallOpts, agentId *big.Int, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "areTheyLinked", agentId, scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchSession) AreTheyLinked(agentId *big.Int, scannerId *big.Int) (bool, error) {
	return _Dispatch.Contract.AreTheyLinked(&_Dispatch.CallOpts, agentId, scannerId)
}

// AreTheyLinked is a free data retrieval call binding the contract method 0xe47db787.
//
// Solidity: function areTheyLinked(uint256 agentId, uint256 scannerId) view returns(bool)
func (_Dispatch *DispatchCallerSession) AreTheyLinked(agentId *big.Int, scannerId *big.Int) (bool, error) {
	return _Dispatch.Contract.AreTheyLinked(&_Dispatch.CallOpts, agentId, scannerId)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Dispatch.Contract.IsTrustedForwarder(&_Dispatch.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Dispatch *DispatchCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Dispatch.Contract.IsTrustedForwarder(&_Dispatch.CallOpts, forwarder)
}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchCaller) NumAgentsFor(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "numAgentsFor", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchSession) NumAgentsFor(scannerId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumAgentsFor(&_Dispatch.CallOpts, scannerId)
}

// NumAgentsFor is a free data retrieval call binding the contract method 0xbd3c3a1a.
//
// Solidity: function numAgentsFor(uint256 scannerId) view returns(uint256)
func (_Dispatch *DispatchCallerSession) NumAgentsFor(scannerId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumAgentsFor(&_Dispatch.CallOpts, scannerId)
}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchCaller) NumScannersFor(opts *bind.CallOpts, agentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "numScannersFor", agentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchSession) NumScannersFor(agentId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumScannersFor(&_Dispatch.CallOpts, agentId)
}

// NumScannersFor is a free data retrieval call binding the contract method 0x3820d243.
//
// Solidity: function numScannersFor(uint256 agentId) view returns(uint256)
func (_Dispatch *DispatchCallerSession) NumScannersFor(agentId *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.NumScannersFor(&_Dispatch.CallOpts, agentId)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Dispatch *DispatchCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Dispatch *DispatchSession) ProxiableUUID() ([32]byte, error) {
	return _Dispatch.Contract.ProxiableUUID(&_Dispatch.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_Dispatch *DispatchCallerSession) ProxiableUUID() ([32]byte, error) {
	return _Dispatch.Contract.ProxiableUUID(&_Dispatch.CallOpts)
}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCaller) ScannerAt(opts *bind.CallOpts, agentId *big.Int, pos *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerAt", agentId, pos)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchSession) ScannerAt(agentId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.ScannerAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerAt is a free data retrieval call binding the contract method 0x0d80a136.
//
// Solidity: function scannerAt(uint256 agentId, uint256 pos) view returns(uint256)
func (_Dispatch *DispatchCallerSession) ScannerAt(agentId *big.Int, pos *big.Int) (*big.Int, error) {
	return _Dispatch.Contract.ScannerAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCaller) ScannerHash(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerHash", scannerId)

	outstruct := new(struct {
		Length   *big.Int
		Manifest [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Length = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Manifest = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchSession) ScannerHash(scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.ScannerHash(&_Dispatch.CallOpts, scannerId)
}

// ScannerHash is a free data retrieval call binding the contract method 0xb1774f9d.
//
// Solidity: function scannerHash(uint256 scannerId) view returns(uint256 length, bytes32 manifest)
func (_Dispatch *DispatchCallerSession) ScannerHash(scannerId *big.Int) (struct {
	Length   *big.Int
	Manifest [32]byte
}, error) {
	return _Dispatch.Contract.ScannerHash(&_Dispatch.CallOpts, scannerId)
}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_Dispatch *DispatchCaller) ScannerPoolRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerPoolRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_Dispatch *DispatchSession) ScannerPoolRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerPoolRegistry(&_Dispatch.CallOpts)
}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_Dispatch *DispatchCallerSession) ScannerPoolRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerPoolRegistry(&_Dispatch.CallOpts)
}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool operational, bool disabled)
func (_Dispatch *DispatchCaller) ScannerRefAt(opts *bind.CallOpts, agentId *big.Int, pos *big.Int) (struct {
	Registered  bool
	ScannerId   *big.Int
	Owner       common.Address
	ChainId     *big.Int
	Metadata    string
	Operational bool
	Disabled    bool
}, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerRefAt", agentId, pos)

	outstruct := new(struct {
		Registered  bool
		ScannerId   *big.Int
		Owner       common.Address
		ChainId     *big.Int
		Metadata    string
		Operational bool
		Disabled    bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.ScannerId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Owner = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Operational = *abi.ConvertType(out[5], new(bool)).(*bool)
	outstruct.Disabled = *abi.ConvertType(out[6], new(bool)).(*bool)

	return *outstruct, err

}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool operational, bool disabled)
func (_Dispatch *DispatchSession) ScannerRefAt(agentId *big.Int, pos *big.Int) (struct {
	Registered  bool
	ScannerId   *big.Int
	Owner       common.Address
	ChainId     *big.Int
	Metadata    string
	Operational bool
	Disabled    bool
}, error) {
	return _Dispatch.Contract.ScannerRefAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerRefAt is a free data retrieval call binding the contract method 0x8b2e98d6.
//
// Solidity: function scannerRefAt(uint256 agentId, uint256 pos) view returns(bool registered, uint256 scannerId, address owner, uint256 chainId, string metadata, bool operational, bool disabled)
func (_Dispatch *DispatchCallerSession) ScannerRefAt(agentId *big.Int, pos *big.Int) (struct {
	Registered  bool
	ScannerId   *big.Int
	Owner       common.Address
	ChainId     *big.Int
	Metadata    string
	Operational bool
	Disabled    bool
}, error) {
	return _Dispatch.Contract.ScannerRefAt(&_Dispatch.CallOpts, agentId, pos)
}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchCaller) ScannerRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "scannerRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchSession) ScannerRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerRegistry(&_Dispatch.CallOpts)
}

// ScannerRegistry is a free data retrieval call binding the contract method 0x5e9f88b1.
//
// Solidity: function scannerRegistry() view returns(address)
func (_Dispatch *DispatchCallerSession) ScannerRegistry() (common.Address, error) {
	return _Dispatch.Contract.ScannerRegistry(&_Dispatch.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Dispatch.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchSession) Version() (string, error) {
	return _Dispatch.Contract.Version(&_Dispatch.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_Dispatch *DispatchCallerSession) Version() (string, error) {
	return _Dispatch.Contract.Version(&_Dispatch.CallOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_Dispatch *DispatchTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_Dispatch *DispatchSession) DisableRouter() (*types.Transaction, error) {
	return _Dispatch.Contract.DisableRouter(&_Dispatch.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_Dispatch *DispatchTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _Dispatch.Contract.DisableRouter(&_Dispatch.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __agents, address __scanners, address __scannerPools) returns()
func (_Dispatch *DispatchTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __agents common.Address, __scanners common.Address, __scannerPools common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "initialize", __manager, __agents, __scanners, __scannerPools)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __agents, address __scanners, address __scannerPools) returns()
func (_Dispatch *DispatchSession) Initialize(__manager common.Address, __agents common.Address, __scanners common.Address, __scannerPools common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.Initialize(&_Dispatch.TransactOpts, __manager, __agents, __scanners, __scannerPools)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address __manager, address __agents, address __scanners, address __scannerPools) returns()
func (_Dispatch *DispatchTransactorSession) Initialize(__manager common.Address, __agents common.Address, __scanners common.Address, __scannerPools common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.Initialize(&_Dispatch.TransactOpts, __manager, __agents, __scanners, __scannerPools)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactor) Link(opts *bind.TransactOpts, agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "link", agentId, scannerId)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchSession) Link(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Link(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Link is a paid mutator transaction binding the contract method 0x86cf48e7.
//
// Solidity: function link(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactorSession) Link(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Link(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Dispatch.Contract.Multicall(&_Dispatch.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_Dispatch *DispatchTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _Dispatch.Contract.Multicall(&_Dispatch.TransactOpts, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAccessManager(&_Dispatch.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_Dispatch *DispatchTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAccessManager(&_Dispatch.TransactOpts, newManager)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchTransactor) SetAgentRegistry(opts *bind.TransactOpts, newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setAgentRegistry", newAgentRegistry)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchSession) SetAgentRegistry(newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAgentRegistry(&_Dispatch.TransactOpts, newAgentRegistry)
}

// SetAgentRegistry is a paid mutator transaction binding the contract method 0x28342ecf.
//
// Solidity: function setAgentRegistry(address newAgentRegistry) returns()
func (_Dispatch *DispatchTransactorSession) SetAgentRegistry(newAgentRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetAgentRegistry(&_Dispatch.TransactOpts, newAgentRegistry)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.Contract.SetName(&_Dispatch.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_Dispatch *DispatchTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _Dispatch.Contract.SetName(&_Dispatch.TransactOpts, ensRegistry, ensName)
}

// SetScannerPoolRegistry is a paid mutator transaction binding the contract method 0x9fc2d000.
//
// Solidity: function setScannerPoolRegistry(address newScannerPoolRegistry) returns()
func (_Dispatch *DispatchTransactor) SetScannerPoolRegistry(opts *bind.TransactOpts, newScannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setScannerPoolRegistry", newScannerPoolRegistry)
}

// SetScannerPoolRegistry is a paid mutator transaction binding the contract method 0x9fc2d000.
//
// Solidity: function setScannerPoolRegistry(address newScannerPoolRegistry) returns()
func (_Dispatch *DispatchSession) SetScannerPoolRegistry(newScannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerPoolRegistry(&_Dispatch.TransactOpts, newScannerPoolRegistry)
}

// SetScannerPoolRegistry is a paid mutator transaction binding the contract method 0x9fc2d000.
//
// Solidity: function setScannerPoolRegistry(address newScannerPoolRegistry) returns()
func (_Dispatch *DispatchTransactorSession) SetScannerPoolRegistry(newScannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerPoolRegistry(&_Dispatch.TransactOpts, newScannerPoolRegistry)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchTransactor) SetScannerRegistry(opts *bind.TransactOpts, newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "setScannerRegistry", newScannerRegistry)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchSession) SetScannerRegistry(newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerRegistry(&_Dispatch.TransactOpts, newScannerRegistry)
}

// SetScannerRegistry is a paid mutator transaction binding the contract method 0x6b254492.
//
// Solidity: function setScannerRegistry(address newScannerRegistry) returns()
func (_Dispatch *DispatchTransactorSession) SetScannerRegistry(newScannerRegistry common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.SetScannerRegistry(&_Dispatch.TransactOpts, newScannerRegistry)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactor) Unlink(opts *bind.TransactOpts, agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "unlink", agentId, scannerId)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchSession) Unlink(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Unlink(&_Dispatch.TransactOpts, agentId, scannerId)
}

// Unlink is a paid mutator transaction binding the contract method 0x0c65b39d.
//
// Solidity: function unlink(uint256 agentId, uint256 scannerId) returns()
func (_Dispatch *DispatchTransactorSession) Unlink(agentId *big.Int, scannerId *big.Int) (*types.Transaction, error) {
	return _Dispatch.Contract.Unlink(&_Dispatch.TransactOpts, agentId, scannerId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeTo(&_Dispatch.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Dispatch *DispatchTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeTo(&_Dispatch.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeToAndCall(&_Dispatch.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Dispatch *DispatchTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Dispatch.Contract.UpgradeToAndCall(&_Dispatch.TransactOpts, newImplementation, data)
}

// DispatchAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the Dispatch contract.
type DispatchAccessManagerUpdatedIterator struct {
	Event *DispatchAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAccessManagerUpdated represents a AccessManagerUpdated event raised by the Dispatch contract.
type DispatchAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*DispatchAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &DispatchAccessManagerUpdatedIterator{contract: _Dispatch.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *DispatchAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAccessManagerUpdated)
				if err := _Dispatch.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_Dispatch *DispatchFilterer) ParseAccessManagerUpdated(log types.Log) (*DispatchAccessManagerUpdated, error) {
	event := new(DispatchAccessManagerUpdated)
	if err := _Dispatch.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Dispatch contract.
type DispatchAdminChangedIterator struct {
	Event *DispatchAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAdminChanged represents a AdminChanged event raised by the Dispatch contract.
type DispatchAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*DispatchAdminChangedIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &DispatchAdminChangedIterator{contract: _Dispatch.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *DispatchAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAdminChanged)
				if err := _Dispatch.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Dispatch *DispatchFilterer) ParseAdminChanged(log types.Log) (*DispatchAdminChanged, error) {
	event := new(DispatchAdminChanged)
	if err := _Dispatch.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchAlreadyLinkedIterator is returned from FilterAlreadyLinked and is used to iterate over the raw logs and unpacked data for AlreadyLinked events raised by the Dispatch contract.
type DispatchAlreadyLinkedIterator struct {
	Event *DispatchAlreadyLinked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchAlreadyLinkedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchAlreadyLinked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchAlreadyLinked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchAlreadyLinkedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchAlreadyLinkedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchAlreadyLinked represents a AlreadyLinked event raised by the Dispatch contract.
type DispatchAlreadyLinked struct {
	AgentId   *big.Int
	ScannerId *big.Int
	Enable    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAlreadyLinked is a free log retrieval operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) FilterAlreadyLinked(opts *bind.FilterOpts) (*DispatchAlreadyLinkedIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "AlreadyLinked")
	if err != nil {
		return nil, err
	}
	return &DispatchAlreadyLinkedIterator{contract: _Dispatch.contract, event: "AlreadyLinked", logs: logs, sub: sub}, nil
}

// WatchAlreadyLinked is a free log subscription operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) WatchAlreadyLinked(opts *bind.WatchOpts, sink chan<- *DispatchAlreadyLinked) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "AlreadyLinked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchAlreadyLinked)
				if err := _Dispatch.contract.UnpackLog(event, "AlreadyLinked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAlreadyLinked is a log parse operation binding the contract event 0x3b21ddc7f500e14ee79bd727bfda1b5800485bc299e0f5c9616a03c8b957a430.
//
// Solidity: event AlreadyLinked(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) ParseAlreadyLinked(log types.Log) (*DispatchAlreadyLinked, error) {
	event := new(DispatchAlreadyLinked)
	if err := _Dispatch.contract.UnpackLog(event, "AlreadyLinked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Dispatch contract.
type DispatchBeaconUpgradedIterator struct {
	Event *DispatchBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchBeaconUpgraded represents a BeaconUpgraded event raised by the Dispatch contract.
type DispatchBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*DispatchBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &DispatchBeaconUpgradedIterator{contract: _Dispatch.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *DispatchBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchBeaconUpgraded)
				if err := _Dispatch.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Dispatch *DispatchFilterer) ParseBeaconUpgraded(log types.Log) (*DispatchBeaconUpgraded, error) {
	event := new(DispatchBeaconUpgraded)
	if err := _Dispatch.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Dispatch contract.
type DispatchInitializedIterator struct {
	Event *DispatchInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchInitialized represents a Initialized event raised by the Dispatch contract.
type DispatchInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Dispatch *DispatchFilterer) FilterInitialized(opts *bind.FilterOpts) (*DispatchInitializedIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &DispatchInitializedIterator{contract: _Dispatch.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Dispatch *DispatchFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *DispatchInitialized) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchInitialized)
				if err := _Dispatch.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Dispatch *DispatchFilterer) ParseInitialized(log types.Log) (*DispatchInitialized, error) {
	event := new(DispatchInitialized)
	if err := _Dispatch.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchLinkIterator is returned from FilterLink and is used to iterate over the raw logs and unpacked data for Link events raised by the Dispatch contract.
type DispatchLinkIterator struct {
	Event *DispatchLink // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchLinkIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchLink)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchLink)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchLinkIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchLinkIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchLink represents a Link event raised by the Dispatch contract.
type DispatchLink struct {
	AgentId   *big.Int
	ScannerId *big.Int
	Enable    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLink is a free log retrieval operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) FilterLink(opts *bind.FilterOpts) (*DispatchLinkIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "Link")
	if err != nil {
		return nil, err
	}
	return &DispatchLinkIterator{contract: _Dispatch.contract, event: "Link", logs: logs, sub: sub}, nil
}

// WatchLink is a free log subscription operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) WatchLink(opts *bind.WatchOpts, sink chan<- *DispatchLink) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "Link")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchLink)
				if err := _Dispatch.contract.UnpackLog(event, "Link", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLink is a log parse operation binding the contract event 0xf1b8cb2c3105270e747f9df25ec991871d6732bb7c7b86a088fe7d59c9272bbf.
//
// Solidity: event Link(uint256 agentId, uint256 scannerId, bool enable)
func (_Dispatch *DispatchFilterer) ParseLink(log types.Log) (*DispatchLink, error) {
	event := new(DispatchLink)
	if err := _Dispatch.contract.UnpackLog(event, "Link", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the Dispatch contract.
type DispatchRouterUpdatedIterator struct {
	Event *DispatchRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchRouterUpdated represents a RouterUpdated event raised by the Dispatch contract.
type DispatchRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*DispatchRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &DispatchRouterUpdatedIterator{contract: _Dispatch.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *DispatchRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchRouterUpdated)
				if err := _Dispatch.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_Dispatch *DispatchFilterer) ParseRouterUpdated(log types.Log) (*DispatchRouterUpdated, error) {
	event := new(DispatchRouterUpdated)
	if err := _Dispatch.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchSetAgentRegistryIterator is returned from FilterSetAgentRegistry and is used to iterate over the raw logs and unpacked data for SetAgentRegistry events raised by the Dispatch contract.
type DispatchSetAgentRegistryIterator struct {
	Event *DispatchSetAgentRegistry // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchSetAgentRegistryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchSetAgentRegistry)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchSetAgentRegistry)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchSetAgentRegistryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchSetAgentRegistryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchSetAgentRegistry represents a SetAgentRegistry event raised by the Dispatch contract.
type DispatchSetAgentRegistry struct {
	Registry common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetAgentRegistry is a free log retrieval operation binding the contract event 0x7ea96f920e6433e8aa66b24f7acde4c42293bbf4e9805d363021eba0b386e163.
//
// Solidity: event SetAgentRegistry(address registry)
func (_Dispatch *DispatchFilterer) FilterSetAgentRegistry(opts *bind.FilterOpts) (*DispatchSetAgentRegistryIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "SetAgentRegistry")
	if err != nil {
		return nil, err
	}
	return &DispatchSetAgentRegistryIterator{contract: _Dispatch.contract, event: "SetAgentRegistry", logs: logs, sub: sub}, nil
}

// WatchSetAgentRegistry is a free log subscription operation binding the contract event 0x7ea96f920e6433e8aa66b24f7acde4c42293bbf4e9805d363021eba0b386e163.
//
// Solidity: event SetAgentRegistry(address registry)
func (_Dispatch *DispatchFilterer) WatchSetAgentRegistry(opts *bind.WatchOpts, sink chan<- *DispatchSetAgentRegistry) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "SetAgentRegistry")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchSetAgentRegistry)
				if err := _Dispatch.contract.UnpackLog(event, "SetAgentRegistry", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetAgentRegistry is a log parse operation binding the contract event 0x7ea96f920e6433e8aa66b24f7acde4c42293bbf4e9805d363021eba0b386e163.
//
// Solidity: event SetAgentRegistry(address registry)
func (_Dispatch *DispatchFilterer) ParseSetAgentRegistry(log types.Log) (*DispatchSetAgentRegistry, error) {
	event := new(DispatchSetAgentRegistry)
	if err := _Dispatch.contract.UnpackLog(event, "SetAgentRegistry", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchSetScannerPoolRegistryIterator is returned from FilterSetScannerPoolRegistry and is used to iterate over the raw logs and unpacked data for SetScannerPoolRegistry events raised by the Dispatch contract.
type DispatchSetScannerPoolRegistryIterator struct {
	Event *DispatchSetScannerPoolRegistry // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchSetScannerPoolRegistryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchSetScannerPoolRegistry)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchSetScannerPoolRegistry)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchSetScannerPoolRegistryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchSetScannerPoolRegistryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchSetScannerPoolRegistry represents a SetScannerPoolRegistry event raised by the Dispatch contract.
type DispatchSetScannerPoolRegistry struct {
	Registry common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetScannerPoolRegistry is a free log retrieval operation binding the contract event 0x984a0c5e78a5050e00ce4650502487cabd7140cdd3cb17fc141aff267a496f61.
//
// Solidity: event SetScannerPoolRegistry(address registry)
func (_Dispatch *DispatchFilterer) FilterSetScannerPoolRegistry(opts *bind.FilterOpts) (*DispatchSetScannerPoolRegistryIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "SetScannerPoolRegistry")
	if err != nil {
		return nil, err
	}
	return &DispatchSetScannerPoolRegistryIterator{contract: _Dispatch.contract, event: "SetScannerPoolRegistry", logs: logs, sub: sub}, nil
}

// WatchSetScannerPoolRegistry is a free log subscription operation binding the contract event 0x984a0c5e78a5050e00ce4650502487cabd7140cdd3cb17fc141aff267a496f61.
//
// Solidity: event SetScannerPoolRegistry(address registry)
func (_Dispatch *DispatchFilterer) WatchSetScannerPoolRegistry(opts *bind.WatchOpts, sink chan<- *DispatchSetScannerPoolRegistry) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "SetScannerPoolRegistry")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchSetScannerPoolRegistry)
				if err := _Dispatch.contract.UnpackLog(event, "SetScannerPoolRegistry", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetScannerPoolRegistry is a log parse operation binding the contract event 0x984a0c5e78a5050e00ce4650502487cabd7140cdd3cb17fc141aff267a496f61.
//
// Solidity: event SetScannerPoolRegistry(address registry)
func (_Dispatch *DispatchFilterer) ParseSetScannerPoolRegistry(log types.Log) (*DispatchSetScannerPoolRegistry, error) {
	event := new(DispatchSetScannerPoolRegistry)
	if err := _Dispatch.contract.UnpackLog(event, "SetScannerPoolRegistry", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchSetScannerRegistryIterator is returned from FilterSetScannerRegistry and is used to iterate over the raw logs and unpacked data for SetScannerRegistry events raised by the Dispatch contract.
type DispatchSetScannerRegistryIterator struct {
	Event *DispatchSetScannerRegistry // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchSetScannerRegistryIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchSetScannerRegistry)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchSetScannerRegistry)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchSetScannerRegistryIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchSetScannerRegistryIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchSetScannerRegistry represents a SetScannerRegistry event raised by the Dispatch contract.
type DispatchSetScannerRegistry struct {
	Registry common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSetScannerRegistry is a free log retrieval operation binding the contract event 0x9acdcee0386aa30d54ad4cb99c70ebba3ba481570721e43c743d305f84481588.
//
// Solidity: event SetScannerRegistry(address registry)
func (_Dispatch *DispatchFilterer) FilterSetScannerRegistry(opts *bind.FilterOpts) (*DispatchSetScannerRegistryIterator, error) {

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "SetScannerRegistry")
	if err != nil {
		return nil, err
	}
	return &DispatchSetScannerRegistryIterator{contract: _Dispatch.contract, event: "SetScannerRegistry", logs: logs, sub: sub}, nil
}

// WatchSetScannerRegistry is a free log subscription operation binding the contract event 0x9acdcee0386aa30d54ad4cb99c70ebba3ba481570721e43c743d305f84481588.
//
// Solidity: event SetScannerRegistry(address registry)
func (_Dispatch *DispatchFilterer) WatchSetScannerRegistry(opts *bind.WatchOpts, sink chan<- *DispatchSetScannerRegistry) (event.Subscription, error) {

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "SetScannerRegistry")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchSetScannerRegistry)
				if err := _Dispatch.contract.UnpackLog(event, "SetScannerRegistry", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetScannerRegistry is a log parse operation binding the contract event 0x9acdcee0386aa30d54ad4cb99c70ebba3ba481570721e43c743d305f84481588.
//
// Solidity: event SetScannerRegistry(address registry)
func (_Dispatch *DispatchFilterer) ParseSetScannerRegistry(log types.Log) (*DispatchSetScannerRegistry, error) {
	event := new(DispatchSetScannerRegistry)
	if err := _Dispatch.contract.UnpackLog(event, "SetScannerRegistry", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DispatchUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Dispatch contract.
type DispatchUpgradedIterator struct {
	Event *DispatchUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DispatchUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DispatchUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DispatchUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DispatchUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DispatchUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DispatchUpgraded represents a Upgraded event raised by the Dispatch contract.
type DispatchUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*DispatchUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Dispatch.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &DispatchUpgradedIterator{contract: _Dispatch.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *DispatchUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Dispatch.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DispatchUpgraded)
				if err := _Dispatch.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Dispatch *DispatchFilterer) ParseUpgraded(log types.Log) (*DispatchUpgraded, error) {
	event := new(DispatchUpgraded)
	if err := _Dispatch.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
