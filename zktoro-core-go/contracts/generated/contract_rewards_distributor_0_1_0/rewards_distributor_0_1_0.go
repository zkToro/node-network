// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_rewards_distributor_0_1_0

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RewardsDistributorMetaData contains all meta data concerning the RewardsDistributor contract.
var RewardsDistributorMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__subjectGateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClaimedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"DidAccumulateRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"DidReduceRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sharesId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"DidTransferRewardShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"Rewarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeBps\",\"type\":\"uint256\"}],\"name\":\"SetDelegationFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epochDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFeeBps\",\"type\":\"uint256\"}],\"name\":\"SetDelegationParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"availableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"epochNumbers\",\"type\":\"uint256[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedRewardsPerEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"delegationFees\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint240\",\"name\":\"sinceEpoch\",\"type\":\"uint240\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationParamsEpochDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"didAllocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"}],\"name\":\"didTransferShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"didUnallocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatedSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getDelegationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getDelegatorSubjectType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"}],\"name\":\"getSubjectTypeAgency\",\"outputs\":[{\"internalType\":\"enumSubjectTypeValidator.SubjectStakeAgency\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_delegationParamsEpochDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultFeeBps\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"isCurrentEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardedEpochs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"subjectType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"subjectId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"}],\"name\":\"setDelegationFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delegationParamsEpochDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultFeeBps\",\"type\":\"uint256\"}],\"name\":\"setDelegationParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6101006040523060a0523480156200001657600080fd5b506040516200419e3803806200419e833981016040819052620000399162000249565b6001600160a01b038316608052600054610100900460ff1615808015620000675750600054600160ff909116105b8062000097575062000084306200021d60201b62001e381760201c565b15801562000097575060005460ff166001145b620001005760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000124576000805461ff0019166101001790555b6001600160a01b0383166200016d5760405163eac0d38960e01b815260206004820152600d60248201526c2fb932bbb0b93239aa37b5b2b760991b6044820152606401620000f7565b6001600160a01b038216620001b95760405163eac0d38960e01b815260206004820152601060248201526f5f5f7375626a6563744761746577617960801b6044820152606401620000f7565b6001600160a01b0380841660c052821660e052801562000213576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505062000293565b6001600160a01b03163b151590565b80516001600160a01b03811681146200024457600080fd5b919050565b6000806000606084860312156200025f57600080fd5b6200026a846200022c565b92506200027a602085016200022c565b91506200028a604085016200022c565b90509250925092565b60805160a05160c05160e051613e926200030c60003960008181610a3101528181610e1e015261121e01526000818161070201528181610c6a0152611ade0152600081816110b8015281816110f8015281816113c50152818161140501526114bd01526000818161049701526127dc0152613e926000f3fe6080604052600436106102255760003560e01c80637a1ac61e11610123578063bcae25a4116100ab578063d858a7e51161006f578063d858a7e51461073c578063da6ca69f14610751578063e2c11b8d1461078a578063e80f6534146107aa578063f85f91b4146107ca57600080fd5b8063bcae25a41461065d578063c133a56214610674578063c958080414610694578063cec2fb13146106b4578063d1af0c7d146106f057600080fd5b8063a8d2caa7116100f2578063a8d2caa7146105bb578063abea5a9f146105db578063ac9650d8146105f0578063b077e6b61461061d578063b8dc491b1461063d57600080fd5b80637a1ac61e146105245780637aca4883146105445780638063266d146105865780639ec3b571146105a657600080fd5b80633a33f7bb116101b157806352d1902d1161017557806352d1902d1461042757806354fd4d501461043c578063572b6c051461047a5780635e8de33d146104d7578063762fa7b7146104f757600080fd5b80633a33f7bb146103a85780634408d2ba146103bf57806345a6544f146103d45780634f1ef286146103f4578063514700bc1461040757600080fd5b80631daa0445116101f85780631daa0445146102d45780632210ea79146103065780633121db1c146103265780633275f5d4146103465780633659cfe61461038857600080fd5b806309c7b59f1461022a5780630ce00fe71461025d57806319865f651461027f5780631c552f001461029f575b600080fd5b34801561023657600080fd5b5061024a610245366004613492565b6107e1565b6040519081526020015b60405180910390f35b34801561026957600080fd5b5061027d6102783660046134da565b61084d565b005b34801561028b57600080fd5b5061027d61029a366004613573565b6109e8565b3480156102ab57600080fd5b506102bf6102ba3660046135cd565b610d23565b60405163ffffffff9091168152602001610254565b3480156102e057600080fd5b506102f46102ef3660046135e6565b610d34565b60405160ff9091168152602001610254565b34801561031257600080fd5b5061027d610321366004613601565b610d52565b34801561033257600080fd5b5061027d610341366004613648565b611028565b34801561035257600080fd5b506103666103613660046136cd565b611073565b6040805161ffff90931683526001600160f01b03909116602083015201610254565b34801561039457600080fd5b5061027d6103a33660046136ef565b6110ad565b3480156103b457600080fd5b5061024a6101335481565b3480156103cb57600080fd5b506102bf61118d565b3480156103e057600080fd5b5061027d6103ef36600461370c565b61119c565b61027d61040236600461375b565b6113ba565b34801561041357600080fd5b5061024a61042236600461381f565b61148b565b34801561043357600080fd5b5061024a6114b0565b34801561044857600080fd5b5061046d604051806040016040528060058152602001640302e312e360dc1b81525081565b60405161025491906138aa565b34801561048657600080fd5b506104c76104953660046136ef565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6040519015158152602001610254565b3480156104e357600080fd5b5061024a6104f23660046135cd565b611563565b34801561050357600080fd5b506105176105123660046135e6565b61156e565b60405161025491906138f5565b34801561053057600080fd5b5061027d61053f366004613903565b6115c4565b34801561055057600080fd5b506104c761055f366004613923565b61013160209081526000938452604080852082529284528284209052825290205460ff1681565b34801561059257600080fd5b5061027d6105a13660046134da565b6116eb565b3480156105b257600080fd5b5061024a611840565b3480156105c757600080fd5b5061024a6105d63660046135cd565b61184a565b3480156105e757600080fd5b5061024a611855565b3480156105fc57600080fd5b5061061061060b366004613951565b61185f565b6040516102549190613993565b34801561062957600080fd5b5061027d6106383660046136cd565b611954565b34801561064957600080fd5b5061024a6106583660046139f5565b611a24565b34801561066957600080fd5b5061024a6101345481565b34801561068057600080fd5b506102f461068f3660046135e6565b611b80565b3480156106a057600080fd5b5061027d6106af3660046136ef565b611b96565b3480156106c057600080fd5b506104c76106cf3660046136cd565b61013060209081526000928352604080842090915290825290205460ff1681565b3480156106fc57600080fd5b506107247f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610254565b34801561074857600080fd5b5061027d611c54565b34801561075d57600080fd5b5061024a61076c3660046136cd565b61012f60209081526000928352604080842090915290825290205481565b34801561079657600080fd5b5061027d6107a5366004613a2e565b611cdf565b3480156107b657600080fd5b506104c76107c53660046135cd565b611e2d565b3480156107d657600080fd5b5061024a61012d5481565b60008060006107f08787611e47565b6000828152610131602090815260408083208a845282528083206001600160a01b038a168452909152902054919350915060ff161561083457600092505050610845565b61084082828787611e99565b925050505b949350505050565b7f682f2e52611827f404cfed16a2f88d6edd89c32d2adab17c134f6e3db2c9078b61087f8161087a611fcb565b611fd5565b6108bc578061088c611fcb565b6040516301d4003760e61b815260048101929092526001600160a01b031660248201526044015b60405180910390fd5b600060026108c98861156e565b60048111156108da576108da6138bd565b14905080156109205760006108ee88611b80565b905060006108fc828961205a565b600081815261012e6020526040902090915061091881896120a6565b50505061098e565b600061092c888861205a565b600081815261012e6020526040902090915061094b60018201886120a6565b6001600160a01b0385161561098b5761096760028201876120a6565b6001600160a01b0385166000908152600382016020526040902061098b90876120a6565b50505b826001600160a01b0316868860ff167fb6ad72175aa4f7a541bdeb22a4ac8dde72cd549f4560ec4188fb0182948937be88886040516109d7929190918252602082015260400190565b60405180910390a450505050505050565b6000806109f58686611e47565b9150915080610aed57610a06611fcb565b604051635a38fb4360e11b815260ff88166004820152602481018790526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063b471f6869060440160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab9190613a87565b6001600160a01b031614610aed57610ac1611fcb565b60405163871d7af360e01b81526001600160a01b039091166004820152602481018690526044016108b3565b60005b83811015610d1a5760008381526101316020526040812090868684818110610b1a57610b1a613aa4565b9050602002013581526020019081526020016000206000610b39611fcb565b6001600160a01b0316815260208101919091526040016000205460ff1615610b7457604051630c8d9eab60e31b815260040160405180910390fd5b600083815261013160205260408120600191878785818110610b9857610b98613aa4565b9050602002013581526020019081526020016000206000610bb7611fcb565b6001600160a01b0316815260208101919091526040016000908120805460ff191692151592909217909155610c0d8484888886818110610bf957610bf9613aa4565b90506020020135610c08611fcb565b611e99565b905080610c4c576040516303b3e63560e41b815260206004820152600c60248201526b65706f63685265776172647360a01b60448201526064016108b3565b8061012d6000828254610c5f9190613ad0565b90915550610c9790507f0000000000000000000000000000000000000000000000000000000000000000610c91611fcb565b836120d0565b610c9f611fcb565b6001600160a01b0316878960ff167fee076879474b026056941b2a3c769f5f6175c1108b2ed86182ebab5e22aef717898987818110610ce057610ce0613aa4565b9050602002013585604051610cff929190918252602082015260400190565b60405180910390a45080610d1281613ae7565b915050610af0565b50505050505050565b6000610d2e82612127565b92915050565b600060ff821660031415610d4a57506002919050565b5060ff919050565b82600280610d5f8361156e565b6004811115610d7057610d706138bd565b14610d9c5781610d7f8361156e565b826040516365f3939760e01b81526004016108b393929190613b02565b6127108361ffff161115610dd157604051637f16270360e01b815261ffff8416600482015261271060248201526044016108b3565b600080610dde8787611e47565b9150915080158015610ea45750610df3611fcb565b604051635a38fb4360e11b815260ff89166004820152602481018890526001600160a01b03918216917f0000000000000000000000000000000000000000000000000000000000000000169063b471f6869060440160206040518083038186803b158015610e6057600080fd5b505afa158015610e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e989190613a87565b6001600160a01b031614155b15610edd57610eb1611fcb565b60405163871d7af360e01b81526001600160a01b039091166004820152602481018790526044016108b3565b60008281526101326020526040902080600101546201000090046001600160f01b031615610f7457610133548160010154610f2791906201000090046001600160f01b0316613b26565b610f2f61214c565b63ffffffff161015610f54576040516306f08d5560e11b815260040160405180910390fd5b6001810154620100008082046001600160f01b03160261ffff9091161781555b60405180604001604052808761ffff168152602001610f9161214c565b610f9c906001613b3e565b63ffffffff16905281600182516020909301516001600160f01b0316620100000261ffff909316929092179101558660ff89167f57e7115480877427d49265312bd315b204be1c130642149dc3cb5c0e934b7360836001015460408051620100009092046001600160f01b0316825261ffff8b1660208301520160405180910390a35050505050505050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a6110558161087a611fcb565b611062578061088c611fcb565b61106d848484612157565b50505050565b610132602052816000526040600020816002811061109057600080fd5b015461ffff811692506201000090046001600160f01b0316905082565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110f65760405162461bcd60e51b81526004016108b390613b66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661113f600080516020613e16833981519152546001600160a01b031690565b6001600160a01b0316146111655760405162461bcd60e51b81526004016108b390613bb2565b61116e8161226d565b6040805160008082526020820190925261118a918391906122a7565b50565b600061119761214c565b905090565b7fbeec13769b5f410b0584f69811bfd923818456d5edcf426b0e31cf90eed7a3f66111c98161087a611fcb565b6111d6578061088c611fcb565b60ff85166002146111ff5760405163c2628c0b60e01b815260ff861660048201526024016108b3565b6040516360acfba560e11b815260ff86166004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063c159f74a9060440160206040518083038186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190613bfe565b6112c95760405163160eeaff60e31b815260ff86166004820152602481018590526044016108b3565b60006112dd6112d787611b80565b8661205a565b60008181526101306020908152604080832087845290915290205490915060ff161561131f576040516396f6c70960e01b8152600481018490526024016108b3565b6000818152610130602090815260408083208684528252808320805460ff1916600117905583835261012f8252808320868452909152812085905561012d805486929061136d908490613b26565b90915550506040805185815260208101859052869160ff8916917f76e5c7a673aace75f53c8cac60be1afe14a3f24f52c0e2ac3e82d34cadb506a2910160405180910390a3505050505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156114035760405162461bcd60e51b81526004016108b390613b66565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661144c600080516020613e16833981519152546001600160a01b031690565b6001600160a01b0316146114725760405162461bcd60e51b81526004016108b390613bb2565b61147b8261226d565b611487828260016122a7565b5050565b6000806114988585611e47565b5090506114a58184612421565b9150505b9392505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115505760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c000000000000000060648201526084016108b3565b50600080516020613e1683398151915290565b6000610d2e8261243c565b600060ff82166001141561158457506001919050565b60ff82166002141561159857506002919050565b60ff8216600314156115ac57506003919050565b60ff82166115bc57506004919050565b506000919050565b600054610100900460ff16158080156115e45750600054600160ff909116105b806115fe5750303b1580156115fe575060005460ff166001145b61161a5760405162461bcd60e51b81526004016108b390613c20565b6000805460ff19166001179055801561163d576000805461ff0019166101001790555b61164684612470565b82611694576040516303b3e63560e41b815260206004820152601b60248201527f5f64656c65676174696f6e506172616d7345706f636844656c6179000000000060448201526064016108b3565b610133839055610134829055801561106d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b7f682f2e52611827f404cfed16a2f88d6edd89c32d2adab17c134f6e3db2c9078b6117188161087a611fcb565b611725578061088c611fcb565b600060026117328861156e565b6004811115611743576117436138bd565b149050801561178957600061175788611b80565b90506000611765828961205a565b600081815261012e602052604090209091506117818189612544565b5050506117f7565b6000611795888861205a565b600081815261012e602052604090209091506117b46001820188612544565b6001600160a01b038516156117f4576117d06002820187612544565b6001600160a01b038516600090815260038201602052604090206117f49087612544565b50505b826001600160a01b0316868860ff167f1b034b8f7deee3f055c7d202ba3fb445741db2d326ef6911dac90ead6ddb862788886040516109d7929190918252602082015260400190565b6000611197612569565b6000610d2e8261257e565b600061119761259b565b60608167ffffffffffffffff81111561187a5761187a613745565b6040519080825280602002602001820160405280156118ad57816020015b60608152602001906001900390816118985790505b50905060005b8281101561194d5761191d308585848181106118d1576118d1613aa4565b90506020028101906118e39190613c6e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125b492505050565b82828151811061192f5761192f613aa4565b6020026020010181905250808061194590613ae7565b9150506118b3565b5092915050565b7f24791c44c040514a5d2580696fc45e7d3cb6c9fa65bf3db2e4755362d6c155b56119818161087a611fcb565b61198e578061088c611fcb565b826119dc576040516303b3e63560e41b815260206004820152601b60248201527f5f64656c65676174696f6e506172616d7345706f636844656c6179000000000060448201526064016108b3565b6101335461013483905560408051918252602082018490527fd9d34af4527fb1073e056393337f6b6181b788057d7ff6ad960a65b9de9da77e910160405180910390a1505050565b60007f8aef0597c0be1e090afba1f387ee99f604b5d975ccbed6215cdf146ffd5c49fc611a538161087a611fcb565b611a60578061088c611fcb565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a082319060240160206040518083038186803b158015611aa257600080fd5b505afa158015611ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ada9190613cb5565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316856001600160a01b03161415611b275761012d54611b249082613ad0565b90505b611b328585836120d0565b604080516001600160a01b038681168252602082018490528716917fd092d7fceb5ea5a962639fcc27a7bb315e7637e699e3b108cd570c38c7584300910160405180910390a2949350505050565b600060ff821660021415610d4a57506003919050565b6000611ba48161087a611fcb565b611bb1578061088c611fcb565b611bcb6001600160a01b038316637965db0b60e01b6125d9565b611c09576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016108b3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b6065546001600160a01b0316611ca25760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b60448201526064016108b3565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b7f682f2e52611827f404cfed16a2f88d6edd89c32d2adab17c134f6e3db2c9078b611d0c8161087a611fcb565b611d19578061088c611fcb565b84600380611d268361156e565b6004811115611d3757611d376138bd565b14611d465781610d7f8361156e565b600088815261012e602090815260408083206001600160a01b038a168452600381019092528220909190611d79906125f5565b602001516001600160e01b03161115611db0576001600160a01b03871660009081526003820160205260409020611db090866120a6565b6001600160a01b03861660009081526003820160205260409020611dd49086612544565b6040805160ff8a168152602081018790526001600160a01b0380891692908a16918c917f30c38c125879e56ab895468782e239e49d6477197aac74ef891a881a3e2fe26a910160405180910390a4505050505050505050565b6000610d2e826126c1565b6001600160a01b03163b151590565b6000806003611e558561156e565b6004811115611e6657611e666138bd565b14905080611e8557611e80611e7a85611b80565b8461205a565b611e8f565b611e8f848461205a565b91505b9250929050565b600084815261012e6020526040812081611eb382866126d6565b90506000611ec460018401876126d6565b90506000611ed28284613b26565b905080611ee6576000945050505050610845565b6000611ef28a89612421565b60008b815261012f602090815260408083208c8452909152812054919250611f1b828686612728565b90506000612710611f2c8584613cce565b611f369190613d03565b90508b15611fa2576000611f4a8284613ad0565b6001600160a01b038c16600090815260038b016020526040812091925090611f72908e6126d6565b90506000611f8360028c018f6126d6565b9050611f90838383612728565b9b505050505050505050505050610845565b6000611faf848988612728565b9050611fbb8282613b26565b9950505050505050505050610845565b60006111976127d8565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561202257600080fd5b505afa158015612036573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a99190613bfe565b6040805160f884901b6001600160f81b031916602080830191909152602180830194909452825180830390940184526041909101909152815191012060091b60ff909116176101001790565b61148782826120b4856125f5565b602001516001600160e01b03166120cb9190613ad0565b61283b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612122908490612980565b505050565b6000610d2e62093a8061213d6205460085613ad0565b6121479190613d03565b612a52565b600061119742612127565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b1580156121b657600080fd5b505afa1580156121ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ee9190613a87565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b815260040161221b929190613d25565b602060405180830381600087803b15801561223557600080fd5b505af1158015612249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106d9190613cb5565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361229a8161087a611fcb565b611487578061088c611fcb565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156122da5761212283612abb565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561231357600080fd5b505afa925050508015612343575060408051601f3d908101601f1916820190925261234091810190613cb5565b60015b6123a65760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b60648201526084016108b3565b600080516020613e1683398151915281146124155760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b60648201526084016108b3565b50612122838383612b57565b60008281526101326020526040812061084581600185612b7c565b600060016205460062093a806124528584613b26565b61245c9190613cce565b6124669190613b26565b610d2e9190613ad0565b600054610100900460ff16158080156124905750600054600160ff909116105b806124aa5750303b1580156124aa575060005460ff166001145b6124c65760405162461bcd60e51b81526004016108b390613c20565b6000805460ff1916600117905580156124e9576000805461ff0019166101001790555b6124f282612c18565b6124fa612d72565b8015611487576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b6114878282612552856125f5565b602001516001600160e01b03166120cb9190613b26565b600061119761257742612127565b63ffffffff165b60006205460061259162093a8084613cce565b610d2e9190613b26565b60006111976125a942612127565b63ffffffff1661243c565b60606114a98383604051806060016040528060278152602001613e3660279139612ddf565b60006125e483612e7d565b80156114a957506114a98383612eb0565b60408051606081018252600080825260208201819052918101919091528154806126505760408051606080820183526000808352602080840182905292840181905283519182018452808252918101829052918201526114a9565b8261265c600183613ad0565b8154811061266c5761266c613aa4565b6000918252602091829020604080516060810182526002909302909101805463ffffffff811684526001600160e01b036401000000009091041693830193909352600190920154918101919091529392505050565b6000806126cc612569565b9092101592915050565b6000806126e38484612f8f565b805190915063ffffffff166126f78461243c565b6127019190613ad0565b81602001516001600160e01b03166127199190613cce565b81604001516108459190613b26565b6000808060001985870985870292508281108382030391505080600014156127635783828161275957612759613ced565b04925050506114a9565b80841161276f57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561283657600036612819601482613ad0565b61282592369290613d54565b61282e91613d7e565b60601c905090565b503390565b6000604051806060016040528061285142612a52565b63ffffffff16815260200161286584613138565b6001600160e01b0316815260200161287c856131a1565b9052835490915080158015906128c857506128c88461289c600184613ad0565b815481106128ac576128ac613aa4565b600091825260209091206002909102015463ffffffff166126c1565b156129335781846128da600184613ad0565b815481106128ea576128ea613aa4565b60009182526020918290208351928401516001600160e01b03166401000000000263ffffffff90931692909217600290910290910190815560409091015160019091015561106d565b83546001818101865560008681526020908190208551918601516001600160e01b03166401000000000263ffffffff90921691909117600290930201918255604084015191015550505050565b60006129d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131e99092919063ffffffff16565b80519091501561212257808060200190518101906129f39190613bfe565b6121225760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108b3565b600063ffffffff821115612ab75760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b60648201526084016108b3565b5090565b6001600160a01b0381163b612b285760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016108b3565b600080516020613e1683398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612b60836131f8565b600082511180612b6d5750805b156121225761106d8383613238565b6000838360028110612b9057612b90613aa4565b015461ffff16612ba45750610134546114a9565b838360028110612bb657612bb6613aa4565b01546201000090046001600160f01b03168210612bec57838360028110612bdf57612bdf613aa4565b015461ffff1690506114a9565b8215612c0e57612c0784612c01600186613ad0565b84612b7c565b90506114a9565b50610134546114a9565b600054610100900460ff1615808015612c385750600054600160ff909116105b80612c525750303b158015612c52575060005460ff166001145b612c6e5760405162461bcd60e51b81526004016108b390613c20565b6000805460ff191660011790558015612c91576000805461ff0019166101001790555b612cab6001600160a01b038316637965db0b60e01b6125d9565b612ce9576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b60448201526064016108b3565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015611487576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001612538565b600054610100900460ff16612ddd5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016108b3565b565b60606001600160a01b0384163b612e085760405162461bcd60e51b81526004016108b390613db3565b600080856001600160a01b031685604051612e239190613df9565b600060405180830381855af49150503d8060008114612e5e576040519150601f19603f3d011682016040523d82523d6000602084013e612e63565b606091505b5091509150612e738282866132ed565b9695505050505050565b6000612e90826301ffc9a760e01b612eb0565b8015610d2e5750612ea9826001600160e01b0319612eb0565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612f17908690613df9565b6000604051808303818686fa925050503d8060008114612f53576040519150601f19603f3d011682016040523d82523d6000602084013e612f58565b606091505b5091509150602081511015612f735760009350505050610d2e565b818015612e73575080806020019051810190612e739190613bfe565b6040805160608101825260008082526020820181905291810191909152612fb461214c565b63ffffffff1682106130145760405162461bcd60e51b815260206004820152602360248201527f436865636b706f696e74733a2065706f6368206e6f74207965742066696e69736044820152621a195960ea1b60648201526084016108b3565b600061301f8361243c565b845490915060005b8181101561308c57600061303b8284613326565b90508387600001828154811061305357613053613aa4565b600091825260209091206002909102015463ffffffff16111561307857809250613086565b613083816001613b26565b91505b50613027565b8115613101578561309e600184613ad0565b815481106130ae576130ae613aa4565b6000918252602091829020604080516060810182526002909302909101805463ffffffff811684526001600160e01b03640100000000909104169383019390935260019092015491810191909152612e73565b6040805160608082018352600080835260208084018290529284018190528351918201845280825291810182905291820152612e73565b60006001600160e01b03821115612ab75760405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b60648201526084016108b3565b6000806131ad836125f5565b80519091506131c29063ffffffff1642613ad0565b81602001516001600160e01b03166131da9190613cce565b81604001516114a99190613b26565b60606108458484600085613341565b61320181612abb565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6132615760405162461bcd60e51b81526004016108b390613db3565b600080846001600160a01b03168460405161327c9190613df9565b600060405180830381855af49150503d80600081146132b7576040519150601f19603f3d011682016040523d82523d6000602084013e6132bc565b606091505b50915091506132e48282604051806060016040528060278152602001613e36602791396132ed565b95945050505050565b606083156132fc5750816114a9565b82511561330c5782518084602001fd5b8160405162461bcd60e51b81526004016108b391906138aa565b60006133356002848418613d03565b6114a990848416613b26565b6060824710156133a25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108b3565b6001600160a01b0385163b6133f95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108b3565b600080866001600160a01b031685876040516134159190613df9565b60006040518083038185875af1925050503d8060008114613452576040519150601f19603f3d011682016040523d82523d6000602084013e613457565b606091505b50915091506108408282866132ed565b803560ff8116811461347857600080fd5b919050565b6001600160a01b038116811461118a57600080fd5b600080600080608085870312156134a857600080fd5b6134b185613467565b9350602085013592506040850135915060608501356134cf8161347d565b939692955090935050565b600080600080600060a086880312156134f257600080fd5b6134fb86613467565b945060208601359350604086013592506060860135915060808601356135208161347d565b809150509295509295909350565b60008083601f84011261354057600080fd5b50813567ffffffffffffffff81111561355857600080fd5b6020830191508360208260051b8501011115611e9257600080fd5b6000806000806060858703121561358957600080fd5b61359285613467565b935060208501359250604085013567ffffffffffffffff8111156135b557600080fd5b6135c18782880161352e565b95989497509550505050565b6000602082840312156135df57600080fd5b5035919050565b6000602082840312156135f857600080fd5b6114a982613467565b60008060006060848603121561361657600080fd5b61361f84613467565b925060208401359150604084013561ffff8116811461363d57600080fd5b809150509250925092565b60008060006040848603121561365d57600080fd5b83356136688161347d565b9250602084013567ffffffffffffffff8082111561368557600080fd5b818601915086601f83011261369957600080fd5b8135818111156136a857600080fd5b8760208285010111156136ba57600080fd5b6020830194508093505050509250925092565b600080604083850312156136e057600080fd5b50508035926020909101359150565b60006020828403121561370157600080fd5b81356114a98161347d565b6000806000806080858703121561372257600080fd5b61372b85613467565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561376e57600080fd5b82356137798161347d565b9150602083013567ffffffffffffffff8082111561379657600080fd5b818501915085601f8301126137aa57600080fd5b8135818111156137bc576137bc613745565b604051601f8201601f19908116603f011681019083821181831017156137e4576137e4613745565b816040528281528860208487010111156137fd57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60008060006060848603121561383457600080fd5b61383d84613467565b95602085013595506040909401359392505050565b60005b8381101561386d578181015183820152602001613855565b8381111561106d5750506000910152565b60008151808452613896816020860160208601613852565b601f01601f19169290920160200192915050565b6020815260006114a9602083018461387e565b634e487b7160e01b600052602160045260246000fd5b600581106138f157634e487b7160e01b600052602160045260246000fd5b9052565b60208101610d2e82846138d3565b60008060006060848603121561391857600080fd5b833561383d8161347d565b60008060006060848603121561393857600080fd5b8335925060208401359150604084013561363d8161347d565b6000806020838503121561396457600080fd5b823567ffffffffffffffff81111561397b57600080fd5b6139878582860161352e565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156139e857603f198886030184526139d685835161387e565b945092850192908501906001016139ba565b5092979650505050505050565b60008060408385031215613a0857600080fd5b8235613a138161347d565b91506020830135613a238161347d565b809150509250929050565b600080600080600060a08688031215613a4657600080fd5b85359450613a5660208701613467565b93506040860135613a668161347d565b92506060860135613a768161347d565b949793965091946080013592915050565b600060208284031215613a9957600080fd5b81516114a98161347d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613ae257613ae2613aba565b500390565b6000600019821415613afb57613afb613aba565b5060010190565b60ff8416815260608101613b1960208301856138d3565b61084560408301846138d3565b60008219821115613b3957613b39613aba565b500190565b600063ffffffff808316818516808303821115613b5d57613b5d613aba565b01949350505050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b600060208284031215613c1057600080fd5b815180151581146114a957600080fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6000808335601e19843603018112613c8557600080fd5b83018035915067ffffffffffffffff821115613ca057600080fd5b602001915036819003821315611e9257600080fd5b600060208284031215613cc757600080fd5b5051919050565b6000816000190483118215151615613ce857613ce8613aba565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613d2057634e487b7160e01b600052601260045260246000fd5b500490565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60008085851115613d6457600080fd5b83861115613d7157600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015613dab5780818660140360031b1b83161692505b505092915050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251613e0b818460208701613852565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220a61040cdd5bcd82f8a4cee6186414b1d7d364157dabe6492c201282cb8a10e0664736f6c63430008090033",
}

// RewardsDistributorABI is the input ABI used to generate the binding from.
// Deprecated: Use RewardsDistributorMetaData.ABI instead.
var RewardsDistributorABI = RewardsDistributorMetaData.ABI

// RewardsDistributorBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RewardsDistributorMetaData.Bin instead.
var RewardsDistributorBin = RewardsDistributorMetaData.Bin

// DeployRewardsDistributor deploys a new Ethereum contract, binding an instance of RewardsDistributor to it.
func DeployRewardsDistributor(auth *bind.TransactOpts, backend bind.ContractBackend, _forwarder common.Address, _rewardsToken common.Address, __subjectGateway common.Address) (common.Address, *types.Transaction, *RewardsDistributor, error) {
	parsed, err := RewardsDistributorMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RewardsDistributorBin), backend, _forwarder, _rewardsToken, __subjectGateway)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RewardsDistributor{RewardsDistributorCaller: RewardsDistributorCaller{contract: contract}, RewardsDistributorTransactor: RewardsDistributorTransactor{contract: contract}, RewardsDistributorFilterer: RewardsDistributorFilterer{contract: contract}}, nil
}

// RewardsDistributor is an auto generated Go binding around an Ethereum contract.
type RewardsDistributor struct {
	RewardsDistributorCaller     // Read-only binding to the contract
	RewardsDistributorTransactor // Write-only binding to the contract
	RewardsDistributorFilterer   // Log filterer for contract events
}

// RewardsDistributorCaller is an auto generated read-only Go binding around an Ethereum contract.
type RewardsDistributorCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RewardsDistributorTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RewardsDistributorTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RewardsDistributorFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RewardsDistributorFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RewardsDistributorSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RewardsDistributorSession struct {
	Contract     *RewardsDistributor // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// RewardsDistributorCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RewardsDistributorCallerSession struct {
	Contract *RewardsDistributorCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// RewardsDistributorTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RewardsDistributorTransactorSession struct {
	Contract     *RewardsDistributorTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// RewardsDistributorRaw is an auto generated low-level Go binding around an Ethereum contract.
type RewardsDistributorRaw struct {
	Contract *RewardsDistributor // Generic contract binding to access the raw methods on
}

// RewardsDistributorCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RewardsDistributorCallerRaw struct {
	Contract *RewardsDistributorCaller // Generic read-only contract binding to access the raw methods on
}

// RewardsDistributorTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RewardsDistributorTransactorRaw struct {
	Contract *RewardsDistributorTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRewardsDistributor creates a new instance of RewardsDistributor, bound to a specific deployed contract.
func NewRewardsDistributor(address common.Address, backend bind.ContractBackend) (*RewardsDistributor, error) {
	contract, err := bindRewardsDistributor(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributor{RewardsDistributorCaller: RewardsDistributorCaller{contract: contract}, RewardsDistributorTransactor: RewardsDistributorTransactor{contract: contract}, RewardsDistributorFilterer: RewardsDistributorFilterer{contract: contract}}, nil
}

// NewRewardsDistributorCaller creates a new read-only instance of RewardsDistributor, bound to a specific deployed contract.
func NewRewardsDistributorCaller(address common.Address, caller bind.ContractCaller) (*RewardsDistributorCaller, error) {
	contract, err := bindRewardsDistributor(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorCaller{contract: contract}, nil
}

// NewRewardsDistributorTransactor creates a new write-only instance of RewardsDistributor, bound to a specific deployed contract.
func NewRewardsDistributorTransactor(address common.Address, transactor bind.ContractTransactor) (*RewardsDistributorTransactor, error) {
	contract, err := bindRewardsDistributor(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorTransactor{contract: contract}, nil
}

// NewRewardsDistributorFilterer creates a new log filterer instance of RewardsDistributor, bound to a specific deployed contract.
func NewRewardsDistributorFilterer(address common.Address, filterer bind.ContractFilterer) (*RewardsDistributorFilterer, error) {
	contract, err := bindRewardsDistributor(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorFilterer{contract: contract}, nil
}

// bindRewardsDistributor binds a generic wrapper to an already deployed contract.
func bindRewardsDistributor(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RewardsDistributorABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RewardsDistributor *RewardsDistributorRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RewardsDistributor.Contract.RewardsDistributorCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RewardsDistributor *RewardsDistributorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.RewardsDistributorTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RewardsDistributor *RewardsDistributorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.RewardsDistributorTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RewardsDistributor *RewardsDistributorCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RewardsDistributor.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RewardsDistributor *RewardsDistributorTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RewardsDistributor *RewardsDistributorTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.contract.Transact(opts, method, params...)
}

// AvailableReward is a free data retrieval call binding the contract method 0x09c7b59f.
//
// Solidity: function availableReward(uint8 subjectType, uint256 subjectId, uint256 epochNumber, address staker) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) AvailableReward(opts *bind.CallOpts, subjectType uint8, subjectId *big.Int, epochNumber *big.Int, staker common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "availableReward", subjectType, subjectId, epochNumber, staker)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// AvailableReward is a free data retrieval call binding the contract method 0x09c7b59f.
//
// Solidity: function availableReward(uint8 subjectType, uint256 subjectId, uint256 epochNumber, address staker) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) AvailableReward(subjectType uint8, subjectId *big.Int, epochNumber *big.Int, staker common.Address) (*big.Int, error) {
	return _RewardsDistributor.Contract.AvailableReward(&_RewardsDistributor.CallOpts, subjectType, subjectId, epochNumber, staker)
}

// AvailableReward is a free data retrieval call binding the contract method 0x09c7b59f.
//
// Solidity: function availableReward(uint8 subjectType, uint256 subjectId, uint256 epochNumber, address staker) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) AvailableReward(subjectType uint8, subjectId *big.Int, epochNumber *big.Int, staker common.Address) (*big.Int, error) {
	return _RewardsDistributor.Contract.AvailableReward(&_RewardsDistributor.CallOpts, subjectType, subjectId, epochNumber, staker)
}

// ClaimedRewardsPerEpoch is a free data retrieval call binding the contract method 0x7aca4883.
//
// Solidity: function claimedRewardsPerEpoch(uint256 , uint256 , address ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCaller) ClaimedRewardsPerEpoch(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "claimedRewardsPerEpoch", arg0, arg1, arg2)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimedRewardsPerEpoch is a free data retrieval call binding the contract method 0x7aca4883.
//
// Solidity: function claimedRewardsPerEpoch(uint256 , uint256 , address ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorSession) ClaimedRewardsPerEpoch(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _RewardsDistributor.Contract.ClaimedRewardsPerEpoch(&_RewardsDistributor.CallOpts, arg0, arg1, arg2)
}

// ClaimedRewardsPerEpoch is a free data retrieval call binding the contract method 0x7aca4883.
//
// Solidity: function claimedRewardsPerEpoch(uint256 , uint256 , address ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCallerSession) ClaimedRewardsPerEpoch(arg0 *big.Int, arg1 *big.Int, arg2 common.Address) (bool, error) {
	return _RewardsDistributor.Contract.ClaimedRewardsPerEpoch(&_RewardsDistributor.CallOpts, arg0, arg1, arg2)
}

// DefaultFeeBps is a free data retrieval call binding the contract method 0xbcae25a4.
//
// Solidity: function defaultFeeBps() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) DefaultFeeBps(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "defaultFeeBps")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DefaultFeeBps is a free data retrieval call binding the contract method 0xbcae25a4.
//
// Solidity: function defaultFeeBps() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) DefaultFeeBps() (*big.Int, error) {
	return _RewardsDistributor.Contract.DefaultFeeBps(&_RewardsDistributor.CallOpts)
}

// DefaultFeeBps is a free data retrieval call binding the contract method 0xbcae25a4.
//
// Solidity: function defaultFeeBps() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) DefaultFeeBps() (*big.Int, error) {
	return _RewardsDistributor.Contract.DefaultFeeBps(&_RewardsDistributor.CallOpts)
}

// DelegationFees is a free data retrieval call binding the contract method 0x3275f5d4.
//
// Solidity: function delegationFees(uint256 , uint256 ) view returns(uint16 feeBps, uint240 sinceEpoch)
func (_RewardsDistributor *RewardsDistributorCaller) DelegationFees(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (struct {
	FeeBps     uint16
	SinceEpoch *big.Int
}, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "delegationFees", arg0, arg1)

	outstruct := new(struct {
		FeeBps     uint16
		SinceEpoch *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FeeBps = *abi.ConvertType(out[0], new(uint16)).(*uint16)
	outstruct.SinceEpoch = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DelegationFees is a free data retrieval call binding the contract method 0x3275f5d4.
//
// Solidity: function delegationFees(uint256 , uint256 ) view returns(uint16 feeBps, uint240 sinceEpoch)
func (_RewardsDistributor *RewardsDistributorSession) DelegationFees(arg0 *big.Int, arg1 *big.Int) (struct {
	FeeBps     uint16
	SinceEpoch *big.Int
}, error) {
	return _RewardsDistributor.Contract.DelegationFees(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// DelegationFees is a free data retrieval call binding the contract method 0x3275f5d4.
//
// Solidity: function delegationFees(uint256 , uint256 ) view returns(uint16 feeBps, uint240 sinceEpoch)
func (_RewardsDistributor *RewardsDistributorCallerSession) DelegationFees(arg0 *big.Int, arg1 *big.Int) (struct {
	FeeBps     uint16
	SinceEpoch *big.Int
}, error) {
	return _RewardsDistributor.Contract.DelegationFees(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// DelegationParamsEpochDelay is a free data retrieval call binding the contract method 0x3a33f7bb.
//
// Solidity: function delegationParamsEpochDelay() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) DelegationParamsEpochDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "delegationParamsEpochDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DelegationParamsEpochDelay is a free data retrieval call binding the contract method 0x3a33f7bb.
//
// Solidity: function delegationParamsEpochDelay() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) DelegationParamsEpochDelay() (*big.Int, error) {
	return _RewardsDistributor.Contract.DelegationParamsEpochDelay(&_RewardsDistributor.CallOpts)
}

// DelegationParamsEpochDelay is a free data retrieval call binding the contract method 0x3a33f7bb.
//
// Solidity: function delegationParamsEpochDelay() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) DelegationParamsEpochDelay() (*big.Int, error) {
	return _RewardsDistributor.Contract.DelegationParamsEpochDelay(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochEndTimestamp is a free data retrieval call binding the contract method 0xabea5a9f.
//
// Solidity: function getCurrentEpochEndTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) GetCurrentEpochEndTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getCurrentEpochEndTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentEpochEndTimestamp is a free data retrieval call binding the contract method 0xabea5a9f.
//
// Solidity: function getCurrentEpochEndTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) GetCurrentEpochEndTimestamp() (*big.Int, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochEndTimestamp(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochEndTimestamp is a free data retrieval call binding the contract method 0xabea5a9f.
//
// Solidity: function getCurrentEpochEndTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetCurrentEpochEndTimestamp() (*big.Int, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochEndTimestamp(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochNumber is a free data retrieval call binding the contract method 0x4408d2ba.
//
// Solidity: function getCurrentEpochNumber() view returns(uint32)
func (_RewardsDistributor *RewardsDistributorCaller) GetCurrentEpochNumber(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getCurrentEpochNumber")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetCurrentEpochNumber is a free data retrieval call binding the contract method 0x4408d2ba.
//
// Solidity: function getCurrentEpochNumber() view returns(uint32)
func (_RewardsDistributor *RewardsDistributorSession) GetCurrentEpochNumber() (uint32, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochNumber(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochNumber is a free data retrieval call binding the contract method 0x4408d2ba.
//
// Solidity: function getCurrentEpochNumber() view returns(uint32)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetCurrentEpochNumber() (uint32, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochNumber(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochStartTimestamp is a free data retrieval call binding the contract method 0x9ec3b571.
//
// Solidity: function getCurrentEpochStartTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) GetCurrentEpochStartTimestamp(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getCurrentEpochStartTimestamp")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentEpochStartTimestamp is a free data retrieval call binding the contract method 0x9ec3b571.
//
// Solidity: function getCurrentEpochStartTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) GetCurrentEpochStartTimestamp() (*big.Int, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochStartTimestamp(&_RewardsDistributor.CallOpts)
}

// GetCurrentEpochStartTimestamp is a free data retrieval call binding the contract method 0x9ec3b571.
//
// Solidity: function getCurrentEpochStartTimestamp() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetCurrentEpochStartTimestamp() (*big.Int, error) {
	return _RewardsDistributor.Contract.GetCurrentEpochStartTimestamp(&_RewardsDistributor.CallOpts)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCaller) GetDelegatedSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getDelegatedSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetDelegatedSubjectType(&_RewardsDistributor.CallOpts, subjectType)
}

// GetDelegatedSubjectType is a free data retrieval call binding the contract method 0x1daa0445.
//
// Solidity: function getDelegatedSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetDelegatedSubjectType(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetDelegatedSubjectType(&_RewardsDistributor.CallOpts, subjectType)
}

// GetDelegationFee is a free data retrieval call binding the contract method 0x514700bc.
//
// Solidity: function getDelegationFee(uint8 subjectType, uint256 subjectId, uint256 epochNumber) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) GetDelegationFee(opts *bind.CallOpts, subjectType uint8, subjectId *big.Int, epochNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getDelegationFee", subjectType, subjectId, epochNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDelegationFee is a free data retrieval call binding the contract method 0x514700bc.
//
// Solidity: function getDelegationFee(uint8 subjectType, uint256 subjectId, uint256 epochNumber) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) GetDelegationFee(subjectType uint8, subjectId *big.Int, epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetDelegationFee(&_RewardsDistributor.CallOpts, subjectType, subjectId, epochNumber)
}

// GetDelegationFee is a free data retrieval call binding the contract method 0x514700bc.
//
// Solidity: function getDelegationFee(uint8 subjectType, uint256 subjectId, uint256 epochNumber) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetDelegationFee(subjectType uint8, subjectId *big.Int, epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetDelegationFee(&_RewardsDistributor.CallOpts, subjectType, subjectId, epochNumber)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCaller) GetDelegatorSubjectType(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getDelegatorSubjectType", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetDelegatorSubjectType(&_RewardsDistributor.CallOpts, subjectType)
}

// GetDelegatorSubjectType is a free data retrieval call binding the contract method 0xc133a562.
//
// Solidity: function getDelegatorSubjectType(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetDelegatorSubjectType(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetDelegatorSubjectType(&_RewardsDistributor.CallOpts, subjectType)
}

// GetEpochEndTimestamp is a free data retrieval call binding the contract method 0x5e8de33d.
//
// Solidity: function getEpochEndTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) GetEpochEndTimestamp(opts *bind.CallOpts, epochNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getEpochEndTimestamp", epochNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochEndTimestamp is a free data retrieval call binding the contract method 0x5e8de33d.
//
// Solidity: function getEpochEndTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) GetEpochEndTimestamp(epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetEpochEndTimestamp(&_RewardsDistributor.CallOpts, epochNumber)
}

// GetEpochEndTimestamp is a free data retrieval call binding the contract method 0x5e8de33d.
//
// Solidity: function getEpochEndTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetEpochEndTimestamp(epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetEpochEndTimestamp(&_RewardsDistributor.CallOpts, epochNumber)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x1c552f00.
//
// Solidity: function getEpochNumber(uint256 timestamp) pure returns(uint32)
func (_RewardsDistributor *RewardsDistributorCaller) GetEpochNumber(opts *bind.CallOpts, timestamp *big.Int) (uint32, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getEpochNumber", timestamp)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetEpochNumber is a free data retrieval call binding the contract method 0x1c552f00.
//
// Solidity: function getEpochNumber(uint256 timestamp) pure returns(uint32)
func (_RewardsDistributor *RewardsDistributorSession) GetEpochNumber(timestamp *big.Int) (uint32, error) {
	return _RewardsDistributor.Contract.GetEpochNumber(&_RewardsDistributor.CallOpts, timestamp)
}

// GetEpochNumber is a free data retrieval call binding the contract method 0x1c552f00.
//
// Solidity: function getEpochNumber(uint256 timestamp) pure returns(uint32)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetEpochNumber(timestamp *big.Int) (uint32, error) {
	return _RewardsDistributor.Contract.GetEpochNumber(&_RewardsDistributor.CallOpts, timestamp)
}

// GetEpochStartTimestamp is a free data retrieval call binding the contract method 0xa8d2caa7.
//
// Solidity: function getEpochStartTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) GetEpochStartTimestamp(opts *bind.CallOpts, epochNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getEpochStartTimestamp", epochNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEpochStartTimestamp is a free data retrieval call binding the contract method 0xa8d2caa7.
//
// Solidity: function getEpochStartTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) GetEpochStartTimestamp(epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetEpochStartTimestamp(&_RewardsDistributor.CallOpts, epochNumber)
}

// GetEpochStartTimestamp is a free data retrieval call binding the contract method 0xa8d2caa7.
//
// Solidity: function getEpochStartTimestamp(uint256 epochNumber) pure returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetEpochStartTimestamp(epochNumber *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.GetEpochStartTimestamp(&_RewardsDistributor.CallOpts, epochNumber)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCaller) GetSubjectTypeAgency(opts *bind.CallOpts, subjectType uint8) (uint8, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "getSubjectTypeAgency", subjectType)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetSubjectTypeAgency(&_RewardsDistributor.CallOpts, subjectType)
}

// GetSubjectTypeAgency is a free data retrieval call binding the contract method 0x762fa7b7.
//
// Solidity: function getSubjectTypeAgency(uint8 subjectType) pure returns(uint8)
func (_RewardsDistributor *RewardsDistributorCallerSession) GetSubjectTypeAgency(subjectType uint8) (uint8, error) {
	return _RewardsDistributor.Contract.GetSubjectTypeAgency(&_RewardsDistributor.CallOpts, subjectType)
}

// IsCurrentEpoch is a free data retrieval call binding the contract method 0xe80f6534.
//
// Solidity: function isCurrentEpoch(uint256 timestamp) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCaller) IsCurrentEpoch(opts *bind.CallOpts, timestamp *big.Int) (bool, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "isCurrentEpoch", timestamp)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsCurrentEpoch is a free data retrieval call binding the contract method 0xe80f6534.
//
// Solidity: function isCurrentEpoch(uint256 timestamp) view returns(bool)
func (_RewardsDistributor *RewardsDistributorSession) IsCurrentEpoch(timestamp *big.Int) (bool, error) {
	return _RewardsDistributor.Contract.IsCurrentEpoch(&_RewardsDistributor.CallOpts, timestamp)
}

// IsCurrentEpoch is a free data retrieval call binding the contract method 0xe80f6534.
//
// Solidity: function isCurrentEpoch(uint256 timestamp) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCallerSession) IsCurrentEpoch(timestamp *big.Int) (bool, error) {
	return _RewardsDistributor.Contract.IsCurrentEpoch(&_RewardsDistributor.CallOpts, timestamp)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_RewardsDistributor *RewardsDistributorSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _RewardsDistributor.Contract.IsTrustedForwarder(&_RewardsDistributor.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _RewardsDistributor.Contract.IsTrustedForwarder(&_RewardsDistributor.CallOpts, forwarder)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RewardsDistributor *RewardsDistributorCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RewardsDistributor *RewardsDistributorSession) ProxiableUUID() ([32]byte, error) {
	return _RewardsDistributor.Contract.ProxiableUUID(&_RewardsDistributor.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_RewardsDistributor *RewardsDistributorCallerSession) ProxiableUUID() ([32]byte, error) {
	return _RewardsDistributor.Contract.ProxiableUUID(&_RewardsDistributor.CallOpts)
}

// RewardedEpochs is a free data retrieval call binding the contract method 0xcec2fb13.
//
// Solidity: function rewardedEpochs(uint256 , uint256 ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCaller) RewardedEpochs(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (bool, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "rewardedEpochs", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RewardedEpochs is a free data retrieval call binding the contract method 0xcec2fb13.
//
// Solidity: function rewardedEpochs(uint256 , uint256 ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorSession) RewardedEpochs(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _RewardsDistributor.Contract.RewardedEpochs(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// RewardedEpochs is a free data retrieval call binding the contract method 0xcec2fb13.
//
// Solidity: function rewardedEpochs(uint256 , uint256 ) view returns(bool)
func (_RewardsDistributor *RewardsDistributorCallerSession) RewardedEpochs(arg0 *big.Int, arg1 *big.Int) (bool, error) {
	return _RewardsDistributor.Contract.RewardedEpochs(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// RewardsPerEpoch is a free data retrieval call binding the contract method 0xda6ca69f.
//
// Solidity: function rewardsPerEpoch(uint256 , uint256 ) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) RewardsPerEpoch(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "rewardsPerEpoch", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardsPerEpoch is a free data retrieval call binding the contract method 0xda6ca69f.
//
// Solidity: function rewardsPerEpoch(uint256 , uint256 ) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) RewardsPerEpoch(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.RewardsPerEpoch(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// RewardsPerEpoch is a free data retrieval call binding the contract method 0xda6ca69f.
//
// Solidity: function rewardsPerEpoch(uint256 , uint256 ) view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) RewardsPerEpoch(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _RewardsDistributor.Contract.RewardsPerEpoch(&_RewardsDistributor.CallOpts, arg0, arg1)
}

// RewardsToken is a free data retrieval call binding the contract method 0xd1af0c7d.
//
// Solidity: function rewardsToken() view returns(address)
func (_RewardsDistributor *RewardsDistributorCaller) RewardsToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "rewardsToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardsToken is a free data retrieval call binding the contract method 0xd1af0c7d.
//
// Solidity: function rewardsToken() view returns(address)
func (_RewardsDistributor *RewardsDistributorSession) RewardsToken() (common.Address, error) {
	return _RewardsDistributor.Contract.RewardsToken(&_RewardsDistributor.CallOpts)
}

// RewardsToken is a free data retrieval call binding the contract method 0xd1af0c7d.
//
// Solidity: function rewardsToken() view returns(address)
func (_RewardsDistributor *RewardsDistributorCallerSession) RewardsToken() (common.Address, error) {
	return _RewardsDistributor.Contract.RewardsToken(&_RewardsDistributor.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCaller) UnclaimedRewards(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "unclaimedRewards")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) UnclaimedRewards() (*big.Int, error) {
	return _RewardsDistributor.Contract.UnclaimedRewards(&_RewardsDistributor.CallOpts)
}

// UnclaimedRewards is a free data retrieval call binding the contract method 0xf85f91b4.
//
// Solidity: function unclaimedRewards() view returns(uint256)
func (_RewardsDistributor *RewardsDistributorCallerSession) UnclaimedRewards() (*big.Int, error) {
	return _RewardsDistributor.Contract.UnclaimedRewards(&_RewardsDistributor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RewardsDistributor *RewardsDistributorCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _RewardsDistributor.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RewardsDistributor *RewardsDistributorSession) Version() (string, error) {
	return _RewardsDistributor.Contract.Version(&_RewardsDistributor.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_RewardsDistributor *RewardsDistributorCallerSession) Version() (string, error) {
	return _RewardsDistributor.Contract.Version(&_RewardsDistributor.CallOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x19865f65.
//
// Solidity: function claimRewards(uint8 subjectType, uint256 subjectId, uint256[] epochNumbers) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) ClaimRewards(opts *bind.TransactOpts, subjectType uint8, subjectId *big.Int, epochNumbers []*big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "claimRewards", subjectType, subjectId, epochNumbers)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x19865f65.
//
// Solidity: function claimRewards(uint8 subjectType, uint256 subjectId, uint256[] epochNumbers) returns()
func (_RewardsDistributor *RewardsDistributorSession) ClaimRewards(subjectType uint8, subjectId *big.Int, epochNumbers []*big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.ClaimRewards(&_RewardsDistributor.TransactOpts, subjectType, subjectId, epochNumbers)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x19865f65.
//
// Solidity: function claimRewards(uint8 subjectType, uint256 subjectId, uint256[] epochNumbers) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) ClaimRewards(subjectType uint8, subjectId *big.Int, epochNumbers []*big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.ClaimRewards(&_RewardsDistributor.TransactOpts, subjectType, subjectId, epochNumbers)
}

// DidAllocate is a paid mutator transaction binding the contract method 0x8063266d.
//
// Solidity: function didAllocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) DidAllocate(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "didAllocate", subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DidAllocate is a paid mutator transaction binding the contract method 0x8063266d.
//
// Solidity: function didAllocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorSession) DidAllocate(subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidAllocate(&_RewardsDistributor.TransactOpts, subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DidAllocate is a paid mutator transaction binding the contract method 0x8063266d.
//
// Solidity: function didAllocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) DidAllocate(subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidAllocate(&_RewardsDistributor.TransactOpts, subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) DidTransferShares(opts *bind.TransactOpts, sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "didTransferShares", sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_RewardsDistributor *RewardsDistributorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidTransferShares(&_RewardsDistributor.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DidTransferShares is a paid mutator transaction binding the contract method 0xe2c11b8d.
//
// Solidity: function didTransferShares(uint256 sharesId, uint8 subjectType, address from, address to, uint256 sharesAmount) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) DidTransferShares(sharesId *big.Int, subjectType uint8, from common.Address, to common.Address, sharesAmount *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidTransferShares(&_RewardsDistributor.TransactOpts, sharesId, subjectType, from, to, sharesAmount)
}

// DidUnallocate is a paid mutator transaction binding the contract method 0x0ce00fe7.
//
// Solidity: function didUnallocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) DidUnallocate(opts *bind.TransactOpts, subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "didUnallocate", subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DidUnallocate is a paid mutator transaction binding the contract method 0x0ce00fe7.
//
// Solidity: function didUnallocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorSession) DidUnallocate(subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidUnallocate(&_RewardsDistributor.TransactOpts, subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DidUnallocate is a paid mutator transaction binding the contract method 0x0ce00fe7.
//
// Solidity: function didUnallocate(uint8 subjectType, uint256 subject, uint256 stakeAmount, uint256 sharesAmount, address staker) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) DidUnallocate(subjectType uint8, subject *big.Int, stakeAmount *big.Int, sharesAmount *big.Int, staker common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DidUnallocate(&_RewardsDistributor.TransactOpts, subjectType, subject, stakeAmount, sharesAmount, staker)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_RewardsDistributor *RewardsDistributorTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_RewardsDistributor *RewardsDistributorSession) DisableRouter() (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DisableRouter(&_RewardsDistributor.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _RewardsDistributor.Contract.DisableRouter(&_RewardsDistributor.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x7a1ac61e.
//
// Solidity: function initialize(address _manager, uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) Initialize(opts *bind.TransactOpts, _manager common.Address, _delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "initialize", _manager, _delegationParamsEpochDelay, _defaultFeeBps)
}

// Initialize is a paid mutator transaction binding the contract method 0x7a1ac61e.
//
// Solidity: function initialize(address _manager, uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorSession) Initialize(_manager common.Address, _delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Initialize(&_RewardsDistributor.TransactOpts, _manager, _delegationParamsEpochDelay, _defaultFeeBps)
}

// Initialize is a paid mutator transaction binding the contract method 0x7a1ac61e.
//
// Solidity: function initialize(address _manager, uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) Initialize(_manager common.Address, _delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Initialize(&_RewardsDistributor.TransactOpts, _manager, _delegationParamsEpochDelay, _defaultFeeBps)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_RewardsDistributor *RewardsDistributorTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_RewardsDistributor *RewardsDistributorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Multicall(&_RewardsDistributor.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_RewardsDistributor *RewardsDistributorTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Multicall(&_RewardsDistributor.TransactOpts, data)
}

// Reward is a paid mutator transaction binding the contract method 0x45a6544f.
//
// Solidity: function reward(uint8 subjectType, uint256 subjectId, uint256 amount, uint256 epochNumber) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) Reward(opts *bind.TransactOpts, subjectType uint8, subjectId *big.Int, amount *big.Int, epochNumber *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "reward", subjectType, subjectId, amount, epochNumber)
}

// Reward is a paid mutator transaction binding the contract method 0x45a6544f.
//
// Solidity: function reward(uint8 subjectType, uint256 subjectId, uint256 amount, uint256 epochNumber) returns()
func (_RewardsDistributor *RewardsDistributorSession) Reward(subjectType uint8, subjectId *big.Int, amount *big.Int, epochNumber *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Reward(&_RewardsDistributor.TransactOpts, subjectType, subjectId, amount, epochNumber)
}

// Reward is a paid mutator transaction binding the contract method 0x45a6544f.
//
// Solidity: function reward(uint8 subjectType, uint256 subjectId, uint256 amount, uint256 epochNumber) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) Reward(subjectType uint8, subjectId *big.Int, amount *big.Int, epochNumber *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Reward(&_RewardsDistributor.TransactOpts, subjectType, subjectId, amount, epochNumber)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_RewardsDistributor *RewardsDistributorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetAccessManager(&_RewardsDistributor.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetAccessManager(&_RewardsDistributor.TransactOpts, newManager)
}

// SetDelegationFeeBps is a paid mutator transaction binding the contract method 0x2210ea79.
//
// Solidity: function setDelegationFeeBps(uint8 subjectType, uint256 subjectId, uint16 feeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) SetDelegationFeeBps(opts *bind.TransactOpts, subjectType uint8, subjectId *big.Int, feeBps uint16) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "setDelegationFeeBps", subjectType, subjectId, feeBps)
}

// SetDelegationFeeBps is a paid mutator transaction binding the contract method 0x2210ea79.
//
// Solidity: function setDelegationFeeBps(uint8 subjectType, uint256 subjectId, uint16 feeBps) returns()
func (_RewardsDistributor *RewardsDistributorSession) SetDelegationFeeBps(subjectType uint8, subjectId *big.Int, feeBps uint16) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetDelegationFeeBps(&_RewardsDistributor.TransactOpts, subjectType, subjectId, feeBps)
}

// SetDelegationFeeBps is a paid mutator transaction binding the contract method 0x2210ea79.
//
// Solidity: function setDelegationFeeBps(uint8 subjectType, uint256 subjectId, uint16 feeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) SetDelegationFeeBps(subjectType uint8, subjectId *big.Int, feeBps uint16) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetDelegationFeeBps(&_RewardsDistributor.TransactOpts, subjectType, subjectId, feeBps)
}

// SetDelegationParams is a paid mutator transaction binding the contract method 0xb077e6b6.
//
// Solidity: function setDelegationParams(uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) SetDelegationParams(opts *bind.TransactOpts, _delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "setDelegationParams", _delegationParamsEpochDelay, _defaultFeeBps)
}

// SetDelegationParams is a paid mutator transaction binding the contract method 0xb077e6b6.
//
// Solidity: function setDelegationParams(uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorSession) SetDelegationParams(_delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetDelegationParams(&_RewardsDistributor.TransactOpts, _delegationParamsEpochDelay, _defaultFeeBps)
}

// SetDelegationParams is a paid mutator transaction binding the contract method 0xb077e6b6.
//
// Solidity: function setDelegationParams(uint256 _delegationParamsEpochDelay, uint256 _defaultFeeBps) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) SetDelegationParams(_delegationParamsEpochDelay *big.Int, _defaultFeeBps *big.Int) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetDelegationParams(&_RewardsDistributor.TransactOpts, _delegationParamsEpochDelay, _defaultFeeBps)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_RewardsDistributor *RewardsDistributorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetName(&_RewardsDistributor.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.SetName(&_RewardsDistributor.TransactOpts, ensRegistry, ensName)
}

// Sweep is a paid mutator transaction binding the contract method 0xb8dc491b.
//
// Solidity: function sweep(address token, address recipient) returns(uint256)
func (_RewardsDistributor *RewardsDistributorTransactor) Sweep(opts *bind.TransactOpts, token common.Address, recipient common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "sweep", token, recipient)
}

// Sweep is a paid mutator transaction binding the contract method 0xb8dc491b.
//
// Solidity: function sweep(address token, address recipient) returns(uint256)
func (_RewardsDistributor *RewardsDistributorSession) Sweep(token common.Address, recipient common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Sweep(&_RewardsDistributor.TransactOpts, token, recipient)
}

// Sweep is a paid mutator transaction binding the contract method 0xb8dc491b.
//
// Solidity: function sweep(address token, address recipient) returns(uint256)
func (_RewardsDistributor *RewardsDistributorTransactorSession) Sweep(token common.Address, recipient common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.Sweep(&_RewardsDistributor.TransactOpts, token, recipient)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RewardsDistributor *RewardsDistributorTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RewardsDistributor *RewardsDistributorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.UpgradeTo(&_RewardsDistributor.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.UpgradeTo(&_RewardsDistributor.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RewardsDistributor *RewardsDistributorTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RewardsDistributor.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RewardsDistributor *RewardsDistributorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.UpgradeToAndCall(&_RewardsDistributor.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_RewardsDistributor *RewardsDistributorTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _RewardsDistributor.Contract.UpgradeToAndCall(&_RewardsDistributor.TransactOpts, newImplementation, data)
}

// RewardsDistributorAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the RewardsDistributor contract.
type RewardsDistributorAccessManagerUpdatedIterator struct {
	Event *RewardsDistributorAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorAccessManagerUpdated represents a AccessManagerUpdated event raised by the RewardsDistributor contract.
type RewardsDistributorAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*RewardsDistributorAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorAccessManagerUpdatedIterator{contract: _RewardsDistributor.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *RewardsDistributorAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorAccessManagerUpdated)
				if err := _RewardsDistributor.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseAccessManagerUpdated(log types.Log) (*RewardsDistributorAccessManagerUpdated, error) {
	event := new(RewardsDistributorAccessManagerUpdated)
	if err := _RewardsDistributor.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the RewardsDistributor contract.
type RewardsDistributorAdminChangedIterator struct {
	Event *RewardsDistributorAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorAdminChanged represents a AdminChanged event raised by the RewardsDistributor contract.
type RewardsDistributorAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*RewardsDistributorAdminChangedIterator, error) {

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorAdminChangedIterator{contract: _RewardsDistributor.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *RewardsDistributorAdminChanged) (event.Subscription, error) {

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorAdminChanged)
				if err := _RewardsDistributor.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseAdminChanged(log types.Log) (*RewardsDistributorAdminChanged, error) {
	event := new(RewardsDistributorAdminChanged)
	if err := _RewardsDistributor.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the RewardsDistributor contract.
type RewardsDistributorBeaconUpgradedIterator struct {
	Event *RewardsDistributorBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorBeaconUpgraded represents a BeaconUpgraded event raised by the RewardsDistributor contract.
type RewardsDistributorBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*RewardsDistributorBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorBeaconUpgradedIterator{contract: _RewardsDistributor.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *RewardsDistributorBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorBeaconUpgraded)
				if err := _RewardsDistributor.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseBeaconUpgraded(log types.Log) (*RewardsDistributorBeaconUpgraded, error) {
	event := new(RewardsDistributorBeaconUpgraded)
	if err := _RewardsDistributor.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorClaimedRewardsIterator is returned from FilterClaimedRewards and is used to iterate over the raw logs and unpacked data for ClaimedRewards events raised by the RewardsDistributor contract.
type RewardsDistributorClaimedRewardsIterator struct {
	Event *RewardsDistributorClaimedRewards // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorClaimedRewardsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorClaimedRewards)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorClaimedRewards)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorClaimedRewardsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorClaimedRewardsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorClaimedRewards represents a ClaimedRewards event raised by the RewardsDistributor contract.
type RewardsDistributorClaimedRewards struct {
	SubjectType uint8
	Subject     *big.Int
	To          common.Address
	EpochNumber *big.Int
	Value       *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterClaimedRewards is a free log retrieval operation binding the contract event 0xee076879474b026056941b2a3c769f5f6175c1108b2ed86182ebab5e22aef717.
//
// Solidity: event ClaimedRewards(uint8 indexed subjectType, uint256 indexed subject, address indexed to, uint256 epochNumber, uint256 value)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterClaimedRewards(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int, to []common.Address) (*RewardsDistributorClaimedRewardsIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "ClaimedRewards", subjectTypeRule, subjectRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorClaimedRewardsIterator{contract: _RewardsDistributor.contract, event: "ClaimedRewards", logs: logs, sub: sub}, nil
}

// WatchClaimedRewards is a free log subscription operation binding the contract event 0xee076879474b026056941b2a3c769f5f6175c1108b2ed86182ebab5e22aef717.
//
// Solidity: event ClaimedRewards(uint8 indexed subjectType, uint256 indexed subject, address indexed to, uint256 epochNumber, uint256 value)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchClaimedRewards(opts *bind.WatchOpts, sink chan<- *RewardsDistributorClaimedRewards, subjectType []uint8, subject []*big.Int, to []common.Address) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "ClaimedRewards", subjectTypeRule, subjectRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorClaimedRewards)
				if err := _RewardsDistributor.contract.UnpackLog(event, "ClaimedRewards", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimedRewards is a log parse operation binding the contract event 0xee076879474b026056941b2a3c769f5f6175c1108b2ed86182ebab5e22aef717.
//
// Solidity: event ClaimedRewards(uint8 indexed subjectType, uint256 indexed subject, address indexed to, uint256 epochNumber, uint256 value)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseClaimedRewards(log types.Log) (*RewardsDistributorClaimedRewards, error) {
	event := new(RewardsDistributorClaimedRewards)
	if err := _RewardsDistributor.contract.UnpackLog(event, "ClaimedRewards", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorDidAccumulateRateIterator is returned from FilterDidAccumulateRate and is used to iterate over the raw logs and unpacked data for DidAccumulateRate events raised by the RewardsDistributor contract.
type RewardsDistributorDidAccumulateRateIterator struct {
	Event *RewardsDistributorDidAccumulateRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorDidAccumulateRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorDidAccumulateRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorDidAccumulateRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorDidAccumulateRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorDidAccumulateRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorDidAccumulateRate represents a DidAccumulateRate event raised by the RewardsDistributor contract.
type RewardsDistributorDidAccumulateRate struct {
	SubjectType  uint8
	Subject      *big.Int
	Staker       common.Address
	StakeAmount  *big.Int
	SharesAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDidAccumulateRate is a free log retrieval operation binding the contract event 0x1b034b8f7deee3f055c7d202ba3fb445741db2d326ef6911dac90ead6ddb8627.
//
// Solidity: event DidAccumulateRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterDidAccumulateRate(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int, staker []common.Address) (*RewardsDistributorDidAccumulateRateIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "DidAccumulateRate", subjectTypeRule, subjectRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorDidAccumulateRateIterator{contract: _RewardsDistributor.contract, event: "DidAccumulateRate", logs: logs, sub: sub}, nil
}

// WatchDidAccumulateRate is a free log subscription operation binding the contract event 0x1b034b8f7deee3f055c7d202ba3fb445741db2d326ef6911dac90ead6ddb8627.
//
// Solidity: event DidAccumulateRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchDidAccumulateRate(opts *bind.WatchOpts, sink chan<- *RewardsDistributorDidAccumulateRate, subjectType []uint8, subject []*big.Int, staker []common.Address) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "DidAccumulateRate", subjectTypeRule, subjectRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorDidAccumulateRate)
				if err := _RewardsDistributor.contract.UnpackLog(event, "DidAccumulateRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDidAccumulateRate is a log parse operation binding the contract event 0x1b034b8f7deee3f055c7d202ba3fb445741db2d326ef6911dac90ead6ddb8627.
//
// Solidity: event DidAccumulateRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseDidAccumulateRate(log types.Log) (*RewardsDistributorDidAccumulateRate, error) {
	event := new(RewardsDistributorDidAccumulateRate)
	if err := _RewardsDistributor.contract.UnpackLog(event, "DidAccumulateRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorDidReduceRateIterator is returned from FilterDidReduceRate and is used to iterate over the raw logs and unpacked data for DidReduceRate events raised by the RewardsDistributor contract.
type RewardsDistributorDidReduceRateIterator struct {
	Event *RewardsDistributorDidReduceRate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorDidReduceRateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorDidReduceRate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorDidReduceRate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorDidReduceRateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorDidReduceRateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorDidReduceRate represents a DidReduceRate event raised by the RewardsDistributor contract.
type RewardsDistributorDidReduceRate struct {
	SubjectType  uint8
	Subject      *big.Int
	Staker       common.Address
	StakeAmount  *big.Int
	SharesAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDidReduceRate is a free log retrieval operation binding the contract event 0xb6ad72175aa4f7a541bdeb22a4ac8dde72cd549f4560ec4188fb0182948937be.
//
// Solidity: event DidReduceRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterDidReduceRate(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int, staker []common.Address) (*RewardsDistributorDidReduceRateIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "DidReduceRate", subjectTypeRule, subjectRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorDidReduceRateIterator{contract: _RewardsDistributor.contract, event: "DidReduceRate", logs: logs, sub: sub}, nil
}

// WatchDidReduceRate is a free log subscription operation binding the contract event 0xb6ad72175aa4f7a541bdeb22a4ac8dde72cd549f4560ec4188fb0182948937be.
//
// Solidity: event DidReduceRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchDidReduceRate(opts *bind.WatchOpts, sink chan<- *RewardsDistributorDidReduceRate, subjectType []uint8, subject []*big.Int, staker []common.Address) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}
	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "DidReduceRate", subjectTypeRule, subjectRule, stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorDidReduceRate)
				if err := _RewardsDistributor.contract.UnpackLog(event, "DidReduceRate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDidReduceRate is a log parse operation binding the contract event 0xb6ad72175aa4f7a541bdeb22a4ac8dde72cd549f4560ec4188fb0182948937be.
//
// Solidity: event DidReduceRate(uint8 indexed subjectType, uint256 indexed subject, address indexed staker, uint256 stakeAmount, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseDidReduceRate(log types.Log) (*RewardsDistributorDidReduceRate, error) {
	event := new(RewardsDistributorDidReduceRate)
	if err := _RewardsDistributor.contract.UnpackLog(event, "DidReduceRate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorDidTransferRewardSharesIterator is returned from FilterDidTransferRewardShares and is used to iterate over the raw logs and unpacked data for DidTransferRewardShares events raised by the RewardsDistributor contract.
type RewardsDistributorDidTransferRewardSharesIterator struct {
	Event *RewardsDistributorDidTransferRewardShares // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorDidTransferRewardSharesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorDidTransferRewardShares)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorDidTransferRewardShares)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorDidTransferRewardSharesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorDidTransferRewardSharesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorDidTransferRewardShares represents a DidTransferRewardShares event raised by the RewardsDistributor contract.
type RewardsDistributorDidTransferRewardShares struct {
	SharesId     *big.Int
	SubjectType  uint8
	From         common.Address
	To           common.Address
	SharesAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDidTransferRewardShares is a free log retrieval operation binding the contract event 0x30c38c125879e56ab895468782e239e49d6477197aac74ef891a881a3e2fe26a.
//
// Solidity: event DidTransferRewardShares(uint256 indexed sharesId, uint8 subjectType, address indexed from, address indexed to, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterDidTransferRewardShares(opts *bind.FilterOpts, sharesId []*big.Int, from []common.Address, to []common.Address) (*RewardsDistributorDidTransferRewardSharesIterator, error) {

	var sharesIdRule []interface{}
	for _, sharesIdItem := range sharesId {
		sharesIdRule = append(sharesIdRule, sharesIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "DidTransferRewardShares", sharesIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorDidTransferRewardSharesIterator{contract: _RewardsDistributor.contract, event: "DidTransferRewardShares", logs: logs, sub: sub}, nil
}

// WatchDidTransferRewardShares is a free log subscription operation binding the contract event 0x30c38c125879e56ab895468782e239e49d6477197aac74ef891a881a3e2fe26a.
//
// Solidity: event DidTransferRewardShares(uint256 indexed sharesId, uint8 subjectType, address indexed from, address indexed to, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchDidTransferRewardShares(opts *bind.WatchOpts, sink chan<- *RewardsDistributorDidTransferRewardShares, sharesId []*big.Int, from []common.Address, to []common.Address) (event.Subscription, error) {

	var sharesIdRule []interface{}
	for _, sharesIdItem := range sharesId {
		sharesIdRule = append(sharesIdRule, sharesIdItem)
	}

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "DidTransferRewardShares", sharesIdRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorDidTransferRewardShares)
				if err := _RewardsDistributor.contract.UnpackLog(event, "DidTransferRewardShares", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDidTransferRewardShares is a log parse operation binding the contract event 0x30c38c125879e56ab895468782e239e49d6477197aac74ef891a881a3e2fe26a.
//
// Solidity: event DidTransferRewardShares(uint256 indexed sharesId, uint8 subjectType, address indexed from, address indexed to, uint256 sharesAmount)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseDidTransferRewardShares(log types.Log) (*RewardsDistributorDidTransferRewardShares, error) {
	event := new(RewardsDistributorDidTransferRewardShares)
	if err := _RewardsDistributor.contract.UnpackLog(event, "DidTransferRewardShares", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the RewardsDistributor contract.
type RewardsDistributorInitializedIterator struct {
	Event *RewardsDistributorInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorInitialized represents a Initialized event raised by the RewardsDistributor contract.
type RewardsDistributorInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterInitialized(opts *bind.FilterOpts) (*RewardsDistributorInitializedIterator, error) {

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorInitializedIterator{contract: _RewardsDistributor.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *RewardsDistributorInitialized) (event.Subscription, error) {

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorInitialized)
				if err := _RewardsDistributor.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseInitialized(log types.Log) (*RewardsDistributorInitialized, error) {
	event := new(RewardsDistributorInitialized)
	if err := _RewardsDistributor.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorRewardedIterator is returned from FilterRewarded and is used to iterate over the raw logs and unpacked data for Rewarded events raised by the RewardsDistributor contract.
type RewardsDistributorRewardedIterator struct {
	Event *RewardsDistributorRewarded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorRewardedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorRewarded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorRewarded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorRewardedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorRewardedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorRewarded represents a Rewarded event raised by the RewardsDistributor contract.
type RewardsDistributorRewarded struct {
	SubjectType uint8
	Subject     *big.Int
	Amount      *big.Int
	EpochNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterRewarded is a free log retrieval operation binding the contract event 0x76e5c7a673aace75f53c8cac60be1afe14a3f24f52c0e2ac3e82d34cadb506a2.
//
// Solidity: event Rewarded(uint8 indexed subjectType, uint256 indexed subject, uint256 amount, uint256 epochNumber)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterRewarded(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*RewardsDistributorRewardedIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "Rewarded", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorRewardedIterator{contract: _RewardsDistributor.contract, event: "Rewarded", logs: logs, sub: sub}, nil
}

// WatchRewarded is a free log subscription operation binding the contract event 0x76e5c7a673aace75f53c8cac60be1afe14a3f24f52c0e2ac3e82d34cadb506a2.
//
// Solidity: event Rewarded(uint8 indexed subjectType, uint256 indexed subject, uint256 amount, uint256 epochNumber)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchRewarded(opts *bind.WatchOpts, sink chan<- *RewardsDistributorRewarded, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "Rewarded", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorRewarded)
				if err := _RewardsDistributor.contract.UnpackLog(event, "Rewarded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewarded is a log parse operation binding the contract event 0x76e5c7a673aace75f53c8cac60be1afe14a3f24f52c0e2ac3e82d34cadb506a2.
//
// Solidity: event Rewarded(uint8 indexed subjectType, uint256 indexed subject, uint256 amount, uint256 epochNumber)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseRewarded(log types.Log) (*RewardsDistributorRewarded, error) {
	event := new(RewardsDistributorRewarded)
	if err := _RewardsDistributor.contract.UnpackLog(event, "Rewarded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the RewardsDistributor contract.
type RewardsDistributorRouterUpdatedIterator struct {
	Event *RewardsDistributorRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorRouterUpdated represents a RouterUpdated event raised by the RewardsDistributor contract.
type RewardsDistributorRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*RewardsDistributorRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorRouterUpdatedIterator{contract: _RewardsDistributor.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *RewardsDistributorRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorRouterUpdated)
				if err := _RewardsDistributor.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseRouterUpdated(log types.Log) (*RewardsDistributorRouterUpdated, error) {
	event := new(RewardsDistributorRouterUpdated)
	if err := _RewardsDistributor.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorSetDelegationFeeIterator is returned from FilterSetDelegationFee and is used to iterate over the raw logs and unpacked data for SetDelegationFee events raised by the RewardsDistributor contract.
type RewardsDistributorSetDelegationFeeIterator struct {
	Event *RewardsDistributorSetDelegationFee // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorSetDelegationFeeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorSetDelegationFee)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorSetDelegationFee)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorSetDelegationFeeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorSetDelegationFeeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorSetDelegationFee represents a SetDelegationFee event raised by the RewardsDistributor contract.
type RewardsDistributorSetDelegationFee struct {
	SubjectType uint8
	Subject     *big.Int
	EpochNumber *big.Int
	FeeBps      *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSetDelegationFee is a free log retrieval operation binding the contract event 0x57e7115480877427d49265312bd315b204be1c130642149dc3cb5c0e934b7360.
//
// Solidity: event SetDelegationFee(uint8 indexed subjectType, uint256 indexed subject, uint256 epochNumber, uint256 feeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterSetDelegationFee(opts *bind.FilterOpts, subjectType []uint8, subject []*big.Int) (*RewardsDistributorSetDelegationFeeIterator, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "SetDelegationFee", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorSetDelegationFeeIterator{contract: _RewardsDistributor.contract, event: "SetDelegationFee", logs: logs, sub: sub}, nil
}

// WatchSetDelegationFee is a free log subscription operation binding the contract event 0x57e7115480877427d49265312bd315b204be1c130642149dc3cb5c0e934b7360.
//
// Solidity: event SetDelegationFee(uint8 indexed subjectType, uint256 indexed subject, uint256 epochNumber, uint256 feeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchSetDelegationFee(opts *bind.WatchOpts, sink chan<- *RewardsDistributorSetDelegationFee, subjectType []uint8, subject []*big.Int) (event.Subscription, error) {

	var subjectTypeRule []interface{}
	for _, subjectTypeItem := range subjectType {
		subjectTypeRule = append(subjectTypeRule, subjectTypeItem)
	}
	var subjectRule []interface{}
	for _, subjectItem := range subject {
		subjectRule = append(subjectRule, subjectItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "SetDelegationFee", subjectTypeRule, subjectRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorSetDelegationFee)
				if err := _RewardsDistributor.contract.UnpackLog(event, "SetDelegationFee", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetDelegationFee is a log parse operation binding the contract event 0x57e7115480877427d49265312bd315b204be1c130642149dc3cb5c0e934b7360.
//
// Solidity: event SetDelegationFee(uint8 indexed subjectType, uint256 indexed subject, uint256 epochNumber, uint256 feeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseSetDelegationFee(log types.Log) (*RewardsDistributorSetDelegationFee, error) {
	event := new(RewardsDistributorSetDelegationFee)
	if err := _RewardsDistributor.contract.UnpackLog(event, "SetDelegationFee", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorSetDelegationParamsIterator is returned from FilterSetDelegationParams and is used to iterate over the raw logs and unpacked data for SetDelegationParams events raised by the RewardsDistributor contract.
type RewardsDistributorSetDelegationParamsIterator struct {
	Event *RewardsDistributorSetDelegationParams // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorSetDelegationParamsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorSetDelegationParams)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorSetDelegationParams)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorSetDelegationParamsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorSetDelegationParamsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorSetDelegationParams represents a SetDelegationParams event raised by the RewardsDistributor contract.
type RewardsDistributorSetDelegationParams struct {
	EpochDelay    *big.Int
	DefaultFeeBps *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterSetDelegationParams is a free log retrieval operation binding the contract event 0xd9d34af4527fb1073e056393337f6b6181b788057d7ff6ad960a65b9de9da77e.
//
// Solidity: event SetDelegationParams(uint256 epochDelay, uint256 defaultFeeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterSetDelegationParams(opts *bind.FilterOpts) (*RewardsDistributorSetDelegationParamsIterator, error) {

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "SetDelegationParams")
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorSetDelegationParamsIterator{contract: _RewardsDistributor.contract, event: "SetDelegationParams", logs: logs, sub: sub}, nil
}

// WatchSetDelegationParams is a free log subscription operation binding the contract event 0xd9d34af4527fb1073e056393337f6b6181b788057d7ff6ad960a65b9de9da77e.
//
// Solidity: event SetDelegationParams(uint256 epochDelay, uint256 defaultFeeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchSetDelegationParams(opts *bind.WatchOpts, sink chan<- *RewardsDistributorSetDelegationParams) (event.Subscription, error) {

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "SetDelegationParams")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorSetDelegationParams)
				if err := _RewardsDistributor.contract.UnpackLog(event, "SetDelegationParams", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSetDelegationParams is a log parse operation binding the contract event 0xd9d34af4527fb1073e056393337f6b6181b788057d7ff6ad960a65b9de9da77e.
//
// Solidity: event SetDelegationParams(uint256 epochDelay, uint256 defaultFeeBps)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseSetDelegationParams(log types.Log) (*RewardsDistributorSetDelegationParams, error) {
	event := new(RewardsDistributorSetDelegationParams)
	if err := _RewardsDistributor.contract.UnpackLog(event, "SetDelegationParams", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorTokensSweptIterator is returned from FilterTokensSwept and is used to iterate over the raw logs and unpacked data for TokensSwept events raised by the RewardsDistributor contract.
type RewardsDistributorTokensSweptIterator struct {
	Event *RewardsDistributorTokensSwept // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorTokensSweptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorTokensSwept)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorTokensSwept)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorTokensSweptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorTokensSweptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorTokensSwept represents a TokensSwept event raised by the RewardsDistributor contract.
type RewardsDistributorTokensSwept struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTokensSwept is a free log retrieval operation binding the contract event 0xd092d7fceb5ea5a962639fcc27a7bb315e7637e699e3b108cd570c38c7584300.
//
// Solidity: event TokensSwept(address indexed token, address to, uint256 amount)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterTokensSwept(opts *bind.FilterOpts, token []common.Address) (*RewardsDistributorTokensSweptIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "TokensSwept", tokenRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorTokensSweptIterator{contract: _RewardsDistributor.contract, event: "TokensSwept", logs: logs, sub: sub}, nil
}

// WatchTokensSwept is a free log subscription operation binding the contract event 0xd092d7fceb5ea5a962639fcc27a7bb315e7637e699e3b108cd570c38c7584300.
//
// Solidity: event TokensSwept(address indexed token, address to, uint256 amount)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchTokensSwept(opts *bind.WatchOpts, sink chan<- *RewardsDistributorTokensSwept, token []common.Address) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "TokensSwept", tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorTokensSwept)
				if err := _RewardsDistributor.contract.UnpackLog(event, "TokensSwept", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensSwept is a log parse operation binding the contract event 0xd092d7fceb5ea5a962639fcc27a7bb315e7637e699e3b108cd570c38c7584300.
//
// Solidity: event TokensSwept(address indexed token, address to, uint256 amount)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseTokensSwept(log types.Log) (*RewardsDistributorTokensSwept, error) {
	event := new(RewardsDistributorTokensSwept)
	if err := _RewardsDistributor.contract.UnpackLog(event, "TokensSwept", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RewardsDistributorUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the RewardsDistributor contract.
type RewardsDistributorUpgradedIterator struct {
	Event *RewardsDistributorUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RewardsDistributorUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RewardsDistributorUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RewardsDistributorUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RewardsDistributorUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RewardsDistributorUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RewardsDistributorUpgraded represents a Upgraded event raised by the RewardsDistributor contract.
type RewardsDistributorUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RewardsDistributor *RewardsDistributorFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*RewardsDistributorUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RewardsDistributor.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &RewardsDistributorUpgradedIterator{contract: _RewardsDistributor.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RewardsDistributor *RewardsDistributorFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *RewardsDistributorUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _RewardsDistributor.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RewardsDistributorUpgraded)
				if err := _RewardsDistributor.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_RewardsDistributor *RewardsDistributorFilterer) ParseUpgraded(log types.Log) (*RewardsDistributorUpgraded, error) {
	event := new(RewardsDistributorUpgraded)
	if err := _RewardsDistributor.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
