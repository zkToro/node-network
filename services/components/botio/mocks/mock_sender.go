// Code generated by MockGen. DO NOT EDIT.
// Source: services/components/botio/sender.go

// Package mock_botio is a generated GoMock package.
package mock_botio

import (
	reflect "reflect"

	health "zktoro/zktoro-core-go/clients/health"
	protocol "zktoro/zktoro-core-go/protocol"
	botio "zktoro/services/components/botio"
	gomock "github.com/golang/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockSender) Health() health.Reports {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(health.Reports)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockSenderMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockSender)(nil).Health))
}

// Name mocks base method.
func (m *MockSender) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockSenderMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockSender)(nil).Name))
}

// SendEvaluateAlertRequest mocks base method.
func (m *MockSender) SendEvaluateAlertRequest(req *protocol.EvaluateAlertRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEvaluateAlertRequest", req)
}

// SendEvaluateAlertRequest indicates an expected call of SendEvaluateAlertRequest.
func (mr *MockSenderMockRecorder) SendEvaluateAlertRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvaluateAlertRequest", reflect.TypeOf((*MockSender)(nil).SendEvaluateAlertRequest), req)
}

// SendEvaluateBlockRequest mocks base method.
func (m *MockSender) SendEvaluateBlockRequest(req *protocol.EvaluateBlockRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEvaluateBlockRequest", req)
}

// SendEvaluateBlockRequest indicates an expected call of SendEvaluateBlockRequest.
func (mr *MockSenderMockRecorder) SendEvaluateBlockRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvaluateBlockRequest", reflect.TypeOf((*MockSender)(nil).SendEvaluateBlockRequest), req)
}

// SendEvaluateTxRequest mocks base method.
func (m *MockSender) SendEvaluateTxRequest(req *protocol.EvaluateTxRequest) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEvaluateTxRequest", req)
}

// SendEvaluateTxRequest indicates an expected call of SendEvaluateTxRequest.
func (mr *MockSenderMockRecorder) SendEvaluateTxRequest(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvaluateTxRequest", reflect.TypeOf((*MockSender)(nil).SendEvaluateTxRequest), req)
}

// MockBotPool is a mock of BotPool interface.
type MockBotPool struct {
	ctrl     *gomock.Controller
	recorder *MockBotPoolMockRecorder
}

// MockBotPoolMockRecorder is the mock recorder for MockBotPool.
type MockBotPoolMockRecorder struct {
	mock *MockBotPool
}

// NewMockBotPool creates a new mock instance.
func NewMockBotPool(ctrl *gomock.Controller) *MockBotPool {
	mock := &MockBotPool{ctrl: ctrl}
	mock.recorder = &MockBotPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotPool) EXPECT() *MockBotPoolMockRecorder {
	return m.recorder
}

// GetCurrentBotClients mocks base method.
func (m *MockBotPool) GetCurrentBotClients() []botio.BotClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBotClients")
	ret0, _ := ret[0].([]botio.BotClient)
	return ret0
}

// GetCurrentBotClients indicates an expected call of GetCurrentBotClients.
func (mr *MockBotPoolMockRecorder) GetCurrentBotClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBotClients", reflect.TypeOf((*MockBotPool)(nil).GetCurrentBotClients))
}

// WaitForAll mocks base method.
func (m *MockBotPool) WaitForAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForAll")
}

// WaitForAll indicates an expected call of WaitForAll.
func (mr *MockBotPoolMockRecorder) WaitForAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAll", reflect.TypeOf((*MockBotPool)(nil).WaitForAll))
}
