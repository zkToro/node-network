// Code generated by MockGen. DO NOT EDIT.
// Source: services/components/lifecycle/bot_monitor.go

// Package mock_lifecycle is a generated GoMock package.
package mock_lifecycle

import (
	reflect "reflect"

	protocol "zktoro/zktoro-core-go/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockBotMonitorUpdater is a mock of BotMonitorUpdater interface.
type MockBotMonitorUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockBotMonitorUpdaterMockRecorder
}

// MockBotMonitorUpdaterMockRecorder is the mock recorder for MockBotMonitorUpdater.
type MockBotMonitorUpdaterMockRecorder struct {
	mock *MockBotMonitorUpdater
}

// NewMockBotMonitorUpdater creates a new mock instance.
func NewMockBotMonitorUpdater(ctrl *gomock.Controller) *MockBotMonitorUpdater {
	mock := &MockBotMonitorUpdater{ctrl: ctrl}
	mock.recorder = &MockBotMonitorUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotMonitorUpdater) EXPECT() *MockBotMonitorUpdaterMockRecorder {
	return m.recorder
}

// UpdateWithMetrics mocks base method.
func (m *MockBotMonitorUpdater) UpdateWithMetrics(arg0 *protocol.AgentMetricList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMetrics indicates an expected call of UpdateWithMetrics.
func (mr *MockBotMonitorUpdaterMockRecorder) UpdateWithMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMetrics", reflect.TypeOf((*MockBotMonitorUpdater)(nil).UpdateWithMetrics), arg0)
}

// MockBotMonitorState is a mock of BotMonitorState interface.
type MockBotMonitorState struct {
	ctrl     *gomock.Controller
	recorder *MockBotMonitorStateMockRecorder
}

// MockBotMonitorStateMockRecorder is the mock recorder for MockBotMonitorState.
type MockBotMonitorStateMockRecorder struct {
	mock *MockBotMonitorState
}

// NewMockBotMonitorState creates a new mock instance.
func NewMockBotMonitorState(ctrl *gomock.Controller) *MockBotMonitorState {
	mock := &MockBotMonitorState{ctrl: ctrl}
	mock.recorder = &MockBotMonitorStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotMonitorState) EXPECT() *MockBotMonitorStateMockRecorder {
	return m.recorder
}

// GetInactiveBots mocks base method.
func (m *MockBotMonitorState) GetInactiveBots() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInactiveBots")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetInactiveBots indicates an expected call of GetInactiveBots.
func (mr *MockBotMonitorStateMockRecorder) GetInactiveBots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInactiveBots", reflect.TypeOf((*MockBotMonitorState)(nil).GetInactiveBots))
}

// MonitorBots mocks base method.
func (m *MockBotMonitorState) MonitorBots(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorBots", arg0)
}

// MonitorBots indicates an expected call of MonitorBots.
func (mr *MockBotMonitorStateMockRecorder) MonitorBots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorBots", reflect.TypeOf((*MockBotMonitorState)(nil).MonitorBots), arg0)
}

// MockBotMonitor is a mock of BotMonitor interface.
type MockBotMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockBotMonitorMockRecorder
}

// MockBotMonitorMockRecorder is the mock recorder for MockBotMonitor.
type MockBotMonitorMockRecorder struct {
	mock *MockBotMonitor
}

// NewMockBotMonitor creates a new mock instance.
func NewMockBotMonitor(ctrl *gomock.Controller) *MockBotMonitor {
	mock := &MockBotMonitor{ctrl: ctrl}
	mock.recorder = &MockBotMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotMonitor) EXPECT() *MockBotMonitorMockRecorder {
	return m.recorder
}

// GetInactiveBots mocks base method.
func (m *MockBotMonitor) GetInactiveBots() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInactiveBots")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetInactiveBots indicates an expected call of GetInactiveBots.
func (mr *MockBotMonitorMockRecorder) GetInactiveBots() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInactiveBots", reflect.TypeOf((*MockBotMonitor)(nil).GetInactiveBots))
}

// MonitorBots mocks base method.
func (m *MockBotMonitor) MonitorBots(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorBots", arg0)
}

// MonitorBots indicates an expected call of MonitorBots.
func (mr *MockBotMonitorMockRecorder) MonitorBots(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorBots", reflect.TypeOf((*MockBotMonitor)(nil).MonitorBots), arg0)
}

// UpdateWithMetrics mocks base method.
func (m *MockBotMonitor) UpdateWithMetrics(arg0 *protocol.AgentMetricList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWithMetrics", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWithMetrics indicates an expected call of UpdateWithMetrics.
func (mr *MockBotMonitorMockRecorder) UpdateWithMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWithMetrics", reflect.TypeOf((*MockBotMonitor)(nil).UpdateWithMetrics), arg0)
}
