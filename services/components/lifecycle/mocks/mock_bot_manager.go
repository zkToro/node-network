// Code generated by MockGen. DO NOT EDIT.
// Source: services/components/lifecycle/bot_manager.go

// Package mock_lifecycle is a generated GoMock package.
package mock_lifecycle

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBotLifecycleManager is a mock of BotLifecycleManager interface.
type MockBotLifecycleManager struct {
	ctrl     *gomock.Controller
	recorder *MockBotLifecycleManagerMockRecorder
}

// MockBotLifecycleManagerMockRecorder is the mock recorder for MockBotLifecycleManager.
type MockBotLifecycleManagerMockRecorder struct {
	mock *MockBotLifecycleManager
}

// NewMockBotLifecycleManager creates a new mock instance.
func NewMockBotLifecycleManager(ctrl *gomock.Controller) *MockBotLifecycleManager {
	mock := &MockBotLifecycleManager{ctrl: ctrl}
	mock.recorder = &MockBotLifecycleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotLifecycleManager) EXPECT() *MockBotLifecycleManagerMockRecorder {
	return m.recorder
}

// CleanupUnusedBots mocks base method.
func (m *MockBotLifecycleManager) CleanupUnusedBots(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupUnusedBots", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupUnusedBots indicates an expected call of CleanupUnusedBots.
func (mr *MockBotLifecycleManagerMockRecorder) CleanupUnusedBots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupUnusedBots", reflect.TypeOf((*MockBotLifecycleManager)(nil).CleanupUnusedBots), ctx)
}

// ExitInactiveBots mocks base method.
func (m *MockBotLifecycleManager) ExitInactiveBots(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitInactiveBots", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExitInactiveBots indicates an expected call of ExitInactiveBots.
func (mr *MockBotLifecycleManagerMockRecorder) ExitInactiveBots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitInactiveBots", reflect.TypeOf((*MockBotLifecycleManager)(nil).ExitInactiveBots), ctx)
}

// ManageBots mocks base method.
func (m *MockBotLifecycleManager) ManageBots(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageBots", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManageBots indicates an expected call of ManageBots.
func (mr *MockBotLifecycleManagerMockRecorder) ManageBots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageBots", reflect.TypeOf((*MockBotLifecycleManager)(nil).ManageBots), ctx)
}

// RestartExitedBots mocks base method.
func (m *MockBotLifecycleManager) RestartExitedBots(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartExitedBots", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartExitedBots indicates an expected call of RestartExitedBots.
func (mr *MockBotLifecycleManagerMockRecorder) RestartExitedBots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartExitedBots", reflect.TypeOf((*MockBotLifecycleManager)(nil).RestartExitedBots), ctx)
}

// TearDownRunningBots mocks base method.
func (m *MockBotLifecycleManager) TearDownRunningBots(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TearDownRunningBots", ctx)
}

// TearDownRunningBots indicates an expected call of TearDownRunningBots.
func (mr *MockBotLifecycleManagerMockRecorder) TearDownRunningBots(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDownRunningBots", reflect.TypeOf((*MockBotLifecycleManager)(nil).TearDownRunningBots), ctx)
}
