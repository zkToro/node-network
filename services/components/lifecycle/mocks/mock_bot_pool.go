// Code generated by MockGen. DO NOT EDIT.
// Source: services/components/lifecycle/bot_pool.go

// Package mock_lifecycle is a generated GoMock package.
package mock_lifecycle

import (
	reflect "reflect"

	messaging "zktoro/clients/messaging"
	botio "zktoro/services/components/botio"
	gomock "github.com/golang/mock/gomock"
)

// MockBotPool is a mock of BotPool interface.
type MockBotPool struct {
	ctrl     *gomock.Controller
	recorder *MockBotPoolMockRecorder
}

// MockBotPoolMockRecorder is the mock recorder for MockBotPool.
type MockBotPoolMockRecorder struct {
	mock *MockBotPool
}

// NewMockBotPool creates a new mock instance.
func NewMockBotPool(ctrl *gomock.Controller) *MockBotPool {
	mock := &MockBotPool{ctrl: ctrl}
	mock.recorder = &MockBotPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotPool) EXPECT() *MockBotPoolMockRecorder {
	return m.recorder
}

// GetCurrentBotClients mocks base method.
func (m *MockBotPool) GetCurrentBotClients() []botio.BotClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBotClients")
	ret0, _ := ret[0].([]botio.BotClient)
	return ret0
}

// GetCurrentBotClients indicates an expected call of GetCurrentBotClients.
func (mr *MockBotPoolMockRecorder) GetCurrentBotClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBotClients", reflect.TypeOf((*MockBotPool)(nil).GetCurrentBotClients))
}

// ReconnectToBotsWithConfigs mocks base method.
func (m *MockBotPool) ReconnectToBotsWithConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectToBotsWithConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconnectToBotsWithConfigs indicates an expected call of ReconnectToBotsWithConfigs.
func (mr *MockBotPoolMockRecorder) ReconnectToBotsWithConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectToBotsWithConfigs", reflect.TypeOf((*MockBotPool)(nil).ReconnectToBotsWithConfigs), arg0)
}

// RemoveBotsWithConfigs mocks base method.
func (m *MockBotPool) RemoveBotsWithConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBotsWithConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBotsWithConfigs indicates an expected call of RemoveBotsWithConfigs.
func (mr *MockBotPoolMockRecorder) RemoveBotsWithConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBotsWithConfigs", reflect.TypeOf((*MockBotPool)(nil).RemoveBotsWithConfigs), arg0)
}

// UpdateBotsWithLatestConfigs mocks base method.
func (m *MockBotPool) UpdateBotsWithLatestConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotsWithLatestConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBotsWithLatestConfigs indicates an expected call of UpdateBotsWithLatestConfigs.
func (mr *MockBotPoolMockRecorder) UpdateBotsWithLatestConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotsWithLatestConfigs", reflect.TypeOf((*MockBotPool)(nil).UpdateBotsWithLatestConfigs), arg0)
}

// WaitForAll mocks base method.
func (m *MockBotPool) WaitForAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitForAll")
}

// WaitForAll indicates an expected call of WaitForAll.
func (mr *MockBotPoolMockRecorder) WaitForAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAll", reflect.TypeOf((*MockBotPool)(nil).WaitForAll))
}

// MockBotPoolUpdater is a mock of BotPoolUpdater interface.
type MockBotPoolUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockBotPoolUpdaterMockRecorder
}

// MockBotPoolUpdaterMockRecorder is the mock recorder for MockBotPoolUpdater.
type MockBotPoolUpdaterMockRecorder struct {
	mock *MockBotPoolUpdater
}

// NewMockBotPoolUpdater creates a new mock instance.
func NewMockBotPoolUpdater(ctrl *gomock.Controller) *MockBotPoolUpdater {
	mock := &MockBotPoolUpdater{ctrl: ctrl}
	mock.recorder = &MockBotPoolUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotPoolUpdater) EXPECT() *MockBotPoolUpdaterMockRecorder {
	return m.recorder
}

// ReconnectToBotsWithConfigs mocks base method.
func (m *MockBotPoolUpdater) ReconnectToBotsWithConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReconnectToBotsWithConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReconnectToBotsWithConfigs indicates an expected call of ReconnectToBotsWithConfigs.
func (mr *MockBotPoolUpdaterMockRecorder) ReconnectToBotsWithConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconnectToBotsWithConfigs", reflect.TypeOf((*MockBotPoolUpdater)(nil).ReconnectToBotsWithConfigs), arg0)
}

// RemoveBotsWithConfigs mocks base method.
func (m *MockBotPoolUpdater) RemoveBotsWithConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveBotsWithConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveBotsWithConfigs indicates an expected call of RemoveBotsWithConfigs.
func (mr *MockBotPoolUpdaterMockRecorder) RemoveBotsWithConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveBotsWithConfigs", reflect.TypeOf((*MockBotPoolUpdater)(nil).RemoveBotsWithConfigs), arg0)
}

// UpdateBotsWithLatestConfigs mocks base method.
func (m *MockBotPoolUpdater) UpdateBotsWithLatestConfigs(arg0 messaging.AgentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBotsWithLatestConfigs", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBotsWithLatestConfigs indicates an expected call of UpdateBotsWithLatestConfigs.
func (mr *MockBotPoolUpdaterMockRecorder) UpdateBotsWithLatestConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBotsWithLatestConfigs", reflect.TypeOf((*MockBotPoolUpdater)(nil).UpdateBotsWithLatestConfigs), arg0)
}
